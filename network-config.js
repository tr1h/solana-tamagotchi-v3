// üåê NETWORK CONFIGURATION
// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É Devnet –∏ Mainnet –æ–¥–Ω–∏–º —Ä—ã—á–∞–≥–æ–º!

const NetworkConfig = {
    // üîß –†–´–ß–ê–ì –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø
    // –ò–∑–º–µ–Ω–∏ –Ω–∞ 'mainnet' –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!
    NETWORK: 'devnet', // 'devnet' | 'mainnet'
    
    // üì° RPC ENDPOINTS
    RPC_ENDPOINTS: {
        devnet: 'https://api.devnet.solana.com',
        mainnet: 'https://api.mainnet-beta.solana.com'
    },
    
    // üí∞ –¶–ï–ù–´ –ü–û –§–ê–ó–ê–ú
    PRICES: {
        devnet: {
            phase1: 0.1, // SOL
            phase2: 0.2,
            phase3: 0.3
        },
        mainnet: {
            phase1: 0.1, // SOL (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
            phase2: 0.2,
            phase3: 0.3
        }
    },
    
    // üéØ –ö–û–õ–ò–ß–ï–°–¢–í–û –ú–ò–ù–¢–û–í
    MINT_LIMITS: {
        devnet: {
            phase1: 100,
            phase2: 200,
            phase3: 500
        },
        mainnet: {
            phase1: 1000, // –ë–æ–ª—å—à–µ –¥–ª—è Mainnet
            phase2: 2000,
            phase3: 5000
        }
    },
    
    // üí∞ TAMA –ë–û–ù–£–°–´ –ü–û –§–ê–ó–ê–ú (Early Adopter = –±–æ–ª—å—à–µ!)
    TAMA_BONUS: {
        devnet: {
            phase1: 1000,  // üéÅ Early Adopter Bonus!
            phase2: 750,   // Standard
            phase3: 500    // Late
        },
        mainnet: {
            phase1: 1000,  // üéÅ Early Adopter Bonus!
            phase2: 750,   // Standard
            phase3: 500    // Late
        }
    },
    
    // üè¶ TREASURY WALLET
    TREASURY: {
        devnet: 'FHqNWKNyXryz52koqQdWvqxe8zxb4AcaEtD58DneJSb',
        mainnet: 'FHqNWKNyXryz52koqQdWvqxe8zxb4AcaEtD58DneJSb' // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Mainnet wallet!
    },
    
    // üéÆ –ò–ì–†–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
    GAME_SETTINGS: {
        devnet: {
            xpMultiplier: 1.0,
            tamaMultiplier: 1.0
        },
        mainnet: {
            xpMultiplier: 1.0,
            tamaMultiplier: 1.0
        }
    },
    
    // üîß –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –¢–ï–ö–£–©–ò–• –ù–ê–°–¢–†–û–ï–ö
    getCurrentNetwork() {
        return this.NETWORK;
    },
    
    getRpcEndpoint() {
        return this.RPC_ENDPOINTS[this.NETWORK];
    },
    
    getCurrentPrice(phase = 1) {
        return this.PRICES[this.NETWORK][`phase${phase}`];
    },
    
    getMintLimit(phase = 1) {
        return this.MINT_LIMITS[this.NETWORK][`phase${phase}`];
    },
    
    getTAMABonus(phase = 1) {
        return this.TAMA_BONUS[this.NETWORK][`phase${phase}`];
    },
    
    getTreasuryWallet() {
        return this.TREASURY[this.NETWORK];
    },
    
    getGameMultiplier(type = 'xp') {
        return this.GAME_SETTINGS[this.NETWORK][`${type}Multiplier`];
    },
    
    // üöÄ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê MAINNET
    switchToMainnet() {
        console.log('üöÄ SWITCHING TO MAINNET...');
        this.NETWORK = 'mainnet';
        console.log('‚úÖ Now using Mainnet RPC:', this.getRpcEndpoint());
        console.log('üí∞ Mainnet prices:', this.PRICES.mainnet);
        console.log('üéØ Mainnet limits:', this.MINT_LIMITS.mainnet);
        return true;
    },
    
    // üîß –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ê DEVNET
    switchToDevnet() {
        console.log('üîß SWITCHING TO DEVNET...');
        this.NETWORK = 'devnet';
        console.log('‚úÖ Now using Devnet RPC:', this.getRpcEndpoint());
        return true;
    },
    
    // üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–ö–£–©–ï–ô –°–ï–¢–ò
    getNetworkInfo() {
        return {
            network: this.NETWORK,
            rpc: this.getRpcEndpoint(),
            isMainnet: this.NETWORK === 'mainnet',
            isDevnet: this.NETWORK === 'devnet',
            prices: this.PRICES[this.NETWORK],
            limits: this.MINT_LIMITS[this.NETWORK],
            treasury: this.getTreasuryWallet()
        };
    }
};

// üåç –ì–õ–û–ë–ê–õ–¨–ù–´–ô –î–û–°–¢–£–ü
window.NetworkConfig = NetworkConfig;

// üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
console.log('üåê Network Config loaded!');
console.log('üìç Current network:', NetworkConfig.getCurrentNetwork());
console.log('üîó RPC endpoint:', NetworkConfig.getRpcEndpoint());
console.log('üí∞ Current prices:', NetworkConfig.PRICES[NetworkConfig.getCurrentNetwork()]);

// üöÄ –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ú–û–î–£–õ–ï–ô
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NetworkConfig;
}
