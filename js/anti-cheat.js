// ============================================
// üõ°Ô∏è ANTI-CHEAT SYSTEM - –ó–ê–©–ò–¢–ê –û–¢ –ß–ò–¢–ï–†–û–í
// ============================================

const AntiCheat = {
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –û–ß–ï–ù–¨ –ú–Ø–ì–ö–û –î–õ–Ø –ö–û–ú–§–û–†–¢–ù–û–ô –ò–ì–†–´! üéÆ
    CONFIG: {
        MAX_XP_PER_ACTION: 200,          // –ú–∞–∫—Å–∏–º—É–º XP –∑–∞ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (–≤ 4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ!)
        MAX_TAMA_PER_ACTION: 5000,       // –ú–∞–∫—Å–∏–º—É–º TAMA –∑–∞ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (–≤ 5 —Ä–∞–∑ –±–æ–ª—å—à–µ!)
        MIN_ACTION_INTERVAL: 10,         // –ú–∏–Ω–∏–º—É–º 0.01 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–≤ 5 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!)
        MAX_LEVEL_PER_SESSION: 50,       // –ú–∞–∫—Å–∏–º—É–º 50 –ª–µ–≤–µ–ª–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é (–≤ 5 —Ä–∞–∑ –±–æ–ª—å—à–µ!)
        SESSION_DURATION: 3600000,       // 1 —á–∞—Å = 1 —Å–µ—Å—Å–∏—è
        MAX_ABILITY_USES_PER_HOUR: 200,  // –ú–∞–∫—Å–∏–º—É–º 200 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ —á–∞—Å (–≤ 4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ!)
        HASH_SALT: 'SOLANA_TAMA_2024'    // –°–æ–ª—å –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    },
    
    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    sessionData: {
        startTime: Date.now(),
        actionsCount: 0,
        lastActionTime: 0,
        xpEarned: 0,
        tamaEarned: 0,
        levelsGained: 0,
        abilityUses: {},
        suspiciousActivity: []
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        console.log('üõ°Ô∏è Anti-Cheat System initialized');
        this.loadSessionData();
        this.setupMonitoring();
        this.checkSessionReset();
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
    loadSessionData() {
        const saved = localStorage.getItem('ac_session');
        if (saved) {
            try {
                const data = JSON.parse(saved);
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                if (this.verifySessionData(data)) {
                    this.sessionData = data;
                } else {
                    console.warn('‚ö†Ô∏è Invalid session data, resetting...');
                    this.resetSession();
                }
            } catch (e) {
                this.resetSession();
            }
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
    saveSessionData() {
        const dataWithHash = {
            ...this.sessionData,
            hash: this.generateHash(this.sessionData)
        };
        localStorage.setItem('ac_session', JSON.stringify(dataWithHash));
    },
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    generateHash(data) {
        const str = JSON.stringify({
            startTime: data.startTime,
            xpEarned: data.xpEarned,
            tamaEarned: data.tamaEarned,
            levelsGained: data.levelsGained
        }) + this.CONFIG.HASH_SALT;
        
        // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à (–¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å crypto.subtle)
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = ((hash << 5) - hash) + str.charCodeAt(i);
            hash = hash & hash;
        }
        return hash.toString(36);
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    verifySessionData(data) {
        if (!data.hash) return false;
        
        const expectedHash = this.generateHash(data);
        return data.hash === expectedHash;
    },
    
    // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    resetSession() {
        this.sessionData = {
            startTime: Date.now(),
            actionsCount: 0,
            lastActionTime: 0,
            xpEarned: 0,
            tamaEarned: 0,
            levelsGained: 0,
            abilityUses: {},
            suspiciousActivity: []
        };
        this.saveSessionData();
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ (–∫–∞–∂–¥—ã–π —á–∞—Å)
    checkSessionReset() {
        const now = Date.now();
        const sessionAge = now - this.sessionData.startTime;
        
        if (sessionAge > this.CONFIG.SESSION_DURATION) {
            console.log('üîÑ Session expired, resetting...');
            this.resetSession();
        }
    },
    
    // üéØ –í–ê–õ–ò–î–ê–¶–ò–Ø XP
    validateXPGain(amount, reason) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º—É–º–∞
        if (amount > this.CONFIG.MAX_XP_PER_ACTION) {
            this.reportSuspiciousActivity('xp_too_high', { amount, reason });
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        const now = Date.now();
        if (now - this.sessionData.lastActionTime < this.CONFIG.MIN_ACTION_INTERVAL) {
            this.reportSuspiciousActivity('action_too_fast', { timeDiff: now - this.sessionData.lastActionTime });
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
        this.sessionData.xpEarned += amount;
        this.sessionData.actionsCount++;
        this.sessionData.lastActionTime = now;
        this.saveSessionData();
        
        return true;
    },
    
    // üí∞ –í–ê–õ–ò–î–ê–¶–ò–Ø TAMA
    validateTAMAGain(amount, reason) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º—É–º–∞
        if (amount > this.CONFIG.MAX_TAMA_PER_ACTION) {
            this.reportSuspiciousActivity('tama_too_high', { amount, reason });
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        const now = Date.now();
        if (now - this.sessionData.lastActionTime < this.CONFIG.MIN_ACTION_INTERVAL) {
            this.reportSuspiciousActivity('action_too_fast', { timeDiff: now - this.sessionData.lastActionTime });
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
        this.sessionData.tamaEarned += amount;
        this.sessionData.actionsCount++;
        this.sessionData.lastActionTime = now;
        this.saveSessionData();
        
        return true;
    },
    
    // üìä –í–ê–õ–ò–î–ê–¶–ò–Ø LEVEL UP
    validateLevelUp(currentLevel, newLevel) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—ã–∂–∫–∞ —É—Ä–æ–≤–Ω—è
        if (newLevel - currentLevel > 1) {
            this.reportSuspiciousActivity('level_skip', { from: currentLevel, to: newLevel });
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º—É–º–∞ –ª–µ–≤–µ–ª–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é
        this.sessionData.levelsGained++;
        if (this.sessionData.levelsGained > this.CONFIG.MAX_LEVEL_PER_SESSION) {
            this.reportSuspiciousActivity('too_many_levels', { count: this.sessionData.levelsGained });
            return false;
        }
        
        this.saveSessionData();
        return true;
    },
    
    // ‚ö° –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô
    validateAbilityUse(abilityName, cooldown) {
        const now = Date.now();
        const lastUsed = this.sessionData.abilityUses[abilityName] || 0;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if (now - lastUsed < cooldown) {
            this.reportSuspiciousActivity('cooldown_bypass', { 
                ability: abilityName, 
                timeLeft: cooldown - (now - lastUsed) 
            });
            return false;
        }
        
        // –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∑–∞ —á–∞—Å
        const oneHourAgo = now - 3600000;
        const usesInLastHour = Object.values(this.sessionData.abilityUses)
            .filter(time => time > oneHourAgo).length;
        
        if (usesInLastHour > this.CONFIG.MAX_ABILITY_USES_PER_HOUR) {
            this.reportSuspiciousActivity('ability_spam', { count: usesInLastHour });
            return false;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        this.sessionData.abilityUses[abilityName] = now;
        this.saveSessionData();
        
        return true;
    },
    
    // üîí –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ü–ò–¢–û–ú–¶–ê
    validatePetData(pet, previousPet) {
        // –ê–ù–¢–ò-–ß–ò–¢ –û–¢–ö–õ–Æ–ß–ï–ù - –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–ï–ú TRUE
        return true;
    },
    
    // üìù –†–ï–ü–û–†–¢ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
    reportSuspiciousActivity(type, details) {
        const report = {
            type: type,
            details: details,
            timestamp: Date.now(),
            wallet: window.WalletManager?.publicKey?.toString() || 'unknown'
        };
        
        console.warn('üö® Suspicious activity detected:', report);
        
        this.sessionData.suspiciousActivity.push(report);
        this.saveSessionData();
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (window.Database && window.Database.supabase) {
            this.reportToServer(report);
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showWarning(type);
    },
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async reportToServer(report) {
        try {
            await window.Database.supabase
                .from('anti_cheat_logs')
                .insert({
                    wallet_address: report.wallet,
                    activity_type: report.type,
                    details: report.details,
                    timestamp: new Date(report.timestamp).toISOString()
                });
        } catch (error) {
            console.error('Failed to report to server:', error);
        }
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –ö–û–ú–§–û–†–¢–ù–û–ô –ò–ì–†–´! üéÆ
    showWarning(type) {
        // –ù–ï –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø - –ò–ì–†–ê–ï–ú –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô!
        console.log('üõ°Ô∏è Anti-cheat warning suppressed:', type);
        return;
        
        const messages = {
            xp_too_high: '‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ XP –∑–∞ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ',
            tama_too_high: '‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ TAMA –∑–∞ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ',
            action_too_fast: '‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏',
            level_skip: '‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä—ã–∂–æ–∫ —É—Ä–æ–≤–Ω—è',
            too_many_levels: '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏–π —É—Ä–æ–≤–Ω—è –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è',
            cooldown_bypass: '‚ö†Ô∏è –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –µ—â–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ',
            ability_spam: '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π',
            pet_data_tampered: '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞'
        };
        
        const message = messages[type] || '‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
        
        if (window.UI && window.UI.showNotification) {
            window.UI.showNotification(message, 'error');
        } else {
            alert(message);
        }
    },
    
    // üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì
    setupMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π localStorage
        const originalSetItem = localStorage.setItem;
        localStorage.setItem = function(key, value) {
            if (key === 'petData' && window.AntiCheat) {
                try {
                    const newData = JSON.parse(value);
                    const oldData = localStorage.getItem('petData') ? 
                        JSON.parse(localStorage.getItem('petData')) : null;
                    
                    if (!window.AntiCheat.validatePetData(newData, oldData)) {
                        console.error('üö® Pet data validation failed!');
                        return; // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    }
                } catch (e) {
                    console.error('Error validating pet data:', e);
                }
            }
            originalSetItem.call(this, key, value);
        };
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        this.protectGameFunctions();
    },
    
    // –ó–∞—â–∏—Ç–∞ –∏–≥—Ä–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    protectGameFunctions() {
        // –ó–∞—â–∏—Ç–∞ Game.levelUp() - –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –ö–û–ú–§–û–†–¢–ù–û–ô –ò–ì–†–´! üéÆ
        if (window.Game && window.Game.levelUp) {
            const originalLevelUp = window.Game.levelUp;
            window.Game.levelUp = async function() {
                // –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø - –ò–ì–†–ê–ï–ú –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô!
                console.log('üõ°Ô∏è Level up allowed (anti-cheat disabled)');
                return originalLevelUp.call(this);
            };
        }
        
        // –ó–∞—â–∏—Ç–∞ Game.addXP() - –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –ö–û–ú–§–û–†–¢–ù–û–ô –ò–ì–†–´! üéÆ
        if (window.Game && window.Game.addXP) {
            const originalAddXP = window.Game.addXP;
            window.Game.addXP = function(amount) {
                // –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú –ü–û–õ–£–ß–ï–ù–ò–ï XP - –ò–ì–†–ê–ï–ú –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô!
                console.log('üõ°Ô∏è XP gain allowed (anti-cheat disabled):', amount);
                return originalAddXP.call(this, amount);
            };
        }
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
    getSessionStats() {
        return {
            ...this.sessionData,
            sessionDuration: Date.now() - this.sessionData.startTime,
            actionsPerMinute: this.sessionData.actionsCount / 
                ((Date.now() - this.sessionData.startTime) / 60000),
            suspiciousActivities: this.sessionData.suspiciousActivity.length
        };
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    shouldBan() {
        return this.sessionData.suspiciousActivity.length > 5;
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
    window.AntiCheat = AntiCheat;
    console.log('‚úÖ AntiCheat loaded globally');
}

