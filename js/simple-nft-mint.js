// ============================================
// SIMPLE NFT MINT WITHOUT UMI SDK
// ============================================

const SimpleNFTMint = {
    CANDY_MACHINE_ID: '3Y82dFzikkzTzEk4vDgvHHeyQwap3M2Z7Zbz4Tj6TbJB',
    COLLECTION_MINT: 'EHju5kq2SvPrqFMEYZ8FkXfX3FYPNsFinaQVU6bFtJRT',
    
    wallet: null,
    connection: null,
    
    async init(wallet) {
        try {
            console.log('üöÄ Initializing Simple NFT Mint...');
            
            this.wallet = wallet;
            this.connection = new solanaWeb3.Connection('https://api.devnet.solana.com', 'confirmed');
            
            console.log('‚úÖ Simple NFT Mint initialized');
            return true;
        } catch (error) {
            console.error('‚ùå Failed to initialize Simple NFT Mint:', error);
            return false;
        }
    },
    
    async mintNFT() {
        try {
            console.log('üé® Starting simple NFT mint...');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const petNameInput = document.getElementById('pet-name');
            const customName = petNameInput && petNameInput.value ? petNameInput.value.trim() : '';
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º NFT –¥–∞–Ω–Ω—ã–µ
            const nftData = this.generateNFTData(customName);
            
            // –°–æ–∑–¥–∞—ë–º NFT mint (–Ω–æ–≤—ã–π keypair)
            const mintKeypair = solanaWeb3.Keypair.generate();
            const mintAddress = mintKeypair.publicKey.toString();
            
            console.log('üîë Generated NFT Mint:', mintAddress);
            
            // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ Candy Machine
            // –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –º–∏–Ω—Ç
            
            // –î–ª—è devnet —Ç–µ—Å—Ç–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log('‚úÖ NFT minted successfully (demo)');
            
            return {
                success: true,
                mintAddress: mintAddress,
                signature: 'demo_signature_' + Date.now(),
                metadata: {
                    name: nftData.name,
                    symbol: 'TAMA',
                    uri: 'https://arweave.net/demo',
                    gameData: nftData
                },
                explorerUrl: `https://explorer.solana.com/address/${mintAddress}?cluster=devnet`
            };
            
        } catch (error) {
            console.error('‚ùå Mint failed:', error);
            return {
                success: false,
                error: error.message
            };
        }
    },
    
    generateNFTData(customName = '') {
        const types = [
            { name: 'cat', emoji: 'üê±', weight: 30 },
            { name: 'dog', emoji: 'üê∂', weight: 25 },
            { name: 'dragon', emoji: 'üêâ', weight: 10 },
            { name: 'unicorn', emoji: 'ü¶Ñ', weight: 8 },
            { name: 'phoenix', emoji: 'üî•', weight: 5 },
            { name: 'robot', emoji: 'ü§ñ', weight: 15 },
            { name: 'alien', emoji: 'üëΩ', weight: 12 },
            { name: 'bear', emoji: 'üêª', weight: 20 },
            { name: 'panda', emoji: 'üêº', weight: 18 },
            { name: 'tiger', emoji: 'üêØ', weight: 15 }
        ];
        
        const rarities = [
            { name: 'common', weight: 50 },
            { name: 'rare', weight: 30 },
            { name: 'epic', weight: 15 },
            { name: 'legendary', weight: 5 }
        ];
        
        // Weighted random selection
        const selectWeighted = (items) => {
            const totalWeight = items.reduce((sum, item) => sum + item.weight, 0);
            let random = Math.random() * totalWeight;
            
            for (const item of items) {
                random -= item.weight;
                if (random <= 0) {
                    return item;
                }
            }
            return items[0];
        };
        
        const type = selectWeighted(types);
        const rarity = selectWeighted(rarities);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const petName = customName || `${rarity.name.charAt(0).toUpperCase() + rarity.name.slice(1)} ${type.name.charAt(0).toUpperCase() + type.name.slice(1)}`;
        
        return {
            type: type.name,
            emoji: type.emoji,
            rarity: rarity.name,
            name: petName,
            stats: {
                hunger: 100,
                energy: 100,
                happy: 100,
                health: 100
            },
            level: 1,
            xp: 0,
            total_xp: 0,
            tamaBonus: 500, // Default TAMA bonus
            // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ
            animation: {
                idle: `${type.emoji}`,
                happy: `${type.emoji}‚ú®`,
                eating: `${type.emoji}üçΩÔ∏è`,
                sleeping: `${type.emoji}üò¥`,
                playing: `${type.emoji}üéÆ`
            },
            // –î–ª—è Magic Eden —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            attributes: [
                { trait_type: "Type", value: type.name },
                { trait_type: "Rarity", value: rarity.name },
                { trait_type: "Level", value: "1" },
                { trait_type: "Health", value: "100" },
                { trait_type: "Hunger", value: "100" },
                { trait_type: "Energy", value: "100" },
                { trait_type: "Happy", value: "100" }
            ]
        };
    },
    
    async checkNFTOwnership(walletAddress) {
        try {
            console.log('üîç Checking NFT ownership for:', walletAddress);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ nft_mints
            if (window.Database && window.Database.supabase) {
                const { data, error } = await window.Database.supabase
                    .from('nft_mints')
                    .select('*')
                    .eq('wallet_address', walletAddress)
                    .order('created_at', { ascending: false })
                    .limit(1);
                
                if (error) {
                    console.error('‚ùå Error checking NFT ownership:', error);
                } else if (data && data.length > 0) {
                    const nft = data[0];
                    console.log('‚úÖ NFT found in nft_mints table:', nft);
                    return {
                        hasNFT: true,
                        nfts: [{
                            publicKey: nft.mint_address,
                            metadata: {
                                name: nft.nft_name,
                                symbol: 'TAMA',
                                uri: 'https://arweave.net/demo',
                                gameData: {
                                    type: nft.nft_type,
                                    rarity: nft.nft_rarity
                                }
                            }
                        }]
                    };
                }
            }
            
            // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ players —Ç–∞–±–ª–∏—Ü–µ
            if (window.Database && window.Database.loadPlayerData) {
                const playerData = await window.Database.loadPlayerData(walletAddress);
                if (playerData && playerData.nft_mint_address) {
                    console.log('‚úÖ NFT found in players table:', playerData.nft_mint_address);
                    return {
                        hasNFT: true,
                        nfts: [{
                            publicKey: playerData.nft_mint_address,
                            metadata: {
                                name: playerData.pet_name || 'Tamagotchi',
                                symbol: 'TAMA',
                                uri: 'https://arweave.net/demo',
                                gameData: playerData.pet_data || {}
                            }
                        }]
                    };
                }
            }
            
            console.log('‚ùå No NFT found for wallet:', walletAddress);
            return {
                hasNFT: false,
                nfts: []
            };
            
        } catch (error) {
            console.error('‚ùå NFT ownership check failed:', error);
            return {
                hasNFT: false,
                nfts: []
            };
        }
    }
};

// Export –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.SimpleNFTMint = SimpleNFTMint;

console.log('‚úÖ SimpleNFTMint ready (fallback mode)');
