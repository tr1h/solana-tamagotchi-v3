// ============================================
// üí∞ SIMPLE TAMA SYSTEM - –ë–ï–ó –°–õ–û–ñ–ù–û–°–¢–ï–ô
// ============================================

const SimpleTAMASystem = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    CONFIG: {
        USE_DATABASE: true,
        FALLBACK_TO_LOCAL: true
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        console.log('üí∞ Simple TAMA System initialized');
        return this;
    },

    // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å TAMA
    async getBalance(walletAddress) {
        try {
            if (!walletAddress) {
                console.warn('‚ö†Ô∏è No wallet address provided');
                return 0;
            }

            // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            if (this.CONFIG.FALLBACK_TO_LOCAL) {
                const localBalance = localStorage.getItem(`tama_balance_${walletAddress}`);
                if (localBalance && parseFloat(localBalance) > 0) {
                    const balance = parseFloat(localBalance);
                    console.log(`üí∞ Balance from localStorage: ${balance} TAMA`);
                    return balance;
                }
            }

            // –ü–æ—Ç–æ–º –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–æ–º–µ Treasury)
            if (this.CONFIG.USE_DATABASE && window.Database && window.Database.supabase && walletAddress !== 'TREASURY_MAIN_ACCOUNT') {
                const { data, error } = await window.Database.supabase
                    .from('leaderboard')
                    .select('tama')
                    .eq('wallet_address', walletAddress)
                    .single();

                if (!error && data && data.tama !== null && data.tama > 0) {
                    console.log(`üí∞ Balance from database: ${data.tama} TAMA`);
                    return data.tama || 0;
                } else {
                    console.log('‚ö†Ô∏è No valid database balance, using localStorage fallback');
                }
            }

            // –§–∏–Ω–∞–ª—å–Ω—ã–π fallback –∫ localStorage
            if (this.CONFIG.FALLBACK_TO_LOCAL) {
                const localBalance = localStorage.getItem(`tama_balance_${walletAddress}`);
                const balance = localBalance ? parseFloat(localBalance) : 0;
                console.log(`üí∞ Final fallback from localStorage: ${balance} TAMA`);
                return balance;
            }

            return 0;
        } catch (error) {
            console.error('‚ùå Error getting TAMA balance:', error);
            return 0;
        }
    },

    // –î–æ–±–∞–≤–∏—Ç—å TAMA
    async addTAMA(walletAddress, amount, reason = 'Unknown') {
        try {
            if (!walletAddress || !amount || amount <= 0) {
                console.warn('‚ö†Ô∏è Invalid parameters for adding TAMA');
                return false;
            }

            console.log(`üí∞ Adding ${amount} TAMA for: ${reason} to wallet: ${walletAddress}`);

            // –£–ú–ï–ù–¨–®–ê–ï–ú TREASURY –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Treasury —Å–∞–º —Å–µ–±–µ
            if (walletAddress !== 'TREASURY_MAIN_ACCOUNT') {
                const treasuryBalance = parseInt(localStorage.getItem('tama_balance_TREASURY_MAIN_ACCOUNT') || '0');
                console.log(`üè¶ Current Treasury balance: ${treasuryBalance} TAMA`);
                if (treasuryBalance >= amount) {
                    const newTreasuryBalance = treasuryBalance - amount;
                    localStorage.setItem('tama_balance_TREASURY_MAIN_ACCOUNT', newTreasuryBalance.toString());
                    console.log(`üè¶ Treasury decreased: ${treasuryBalance} ‚Üí ${newTreasuryBalance} TAMA`);
                    
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Treasury –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    if (this.CONFIG.USE_DATABASE && window.Database && window.Database.supabase) {
                        const { error } = await window.Database.supabase
                            .from('leaderboard')
                            .upsert({
                                wallet_address: 'TREASURY_MAIN_ACCOUNT',
                                pet_name: 'Treasury',
                                level: 1,
                                xp: 0,
                                tama: newTreasuryBalance,
                                pet_type: 'Treasury',
                                pet_rarity: 'legendary',
                                updated_at: new Date().toISOString()
                            }, {
                                onConflict: 'wallet_address'
                            });
                        
                        if (error) {
                            console.error('‚ùå Treasury sync error:', error);
                        } else {
                            console.log(`‚úÖ Treasury synced to database: ${newTreasuryBalance} TAMA`);
                        }
                    }
                } else {
                    console.warn('‚ö†Ô∏è Treasury insufficient funds!');
                    return false;
                }
            }

            const currentBalance = await this.getBalance(walletAddress);
            const newBalance = currentBalance + amount;
            console.log(`üí∞ User balance: ${currentBalance} ‚Üí ${newBalance} TAMA`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (this.CONFIG.USE_DATABASE && window.Database && window.Database.supabase) {
                // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                const { data: existingData, error: fetchError } = await window.Database.supabase
                    .from('leaderboard')
                    .select('*')
                    .eq('wallet_address', walletAddress)
                    .single();

                if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 = no rows found
                    console.error('‚ùå Error fetching existing data:', fetchError);
                }

                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è upsert (–ë–ï–ó TAMA - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏)
                const upsertData = {
                    wallet_address: walletAddress,
                    updated_at: new Date().toISOString()
                };

                // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                if (existingData) {
                    upsertData.pet_name = existingData.pet_name || 'Unknown';
                    upsertData.level = existingData.level || 1;
                    upsertData.xp = existingData.xp || 0;
                    upsertData.pet_type = existingData.pet_type || 'Unknown';
                    upsertData.pet_rarity = existingData.pet_rarity || 'common';
                    upsertData.created_at = existingData.created_at || new Date().toISOString();
                } else {
                    // –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
                    upsertData.pet_name = 'Unknown';
                    upsertData.level = 1;
                    upsertData.xp = 0;
                    upsertData.pet_type = 'Unknown';
                    upsertData.pet_rarity = 'common';
                    upsertData.created_at = new Date().toISOString();
                }

                const { error } = await window.Database.supabase
                    .from('leaderboard')
                    .upsert(upsertData, {
                        onConflict: 'wallet_address'
                    });

                if (error) {
                    console.error('‚ùå Database error, using local storage:', error);
                } else {
                    console.log(`‚úÖ Database updated (without TAMA field)`);
                }
                
                // –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º localStorage
                localStorage.setItem(`tama_balance_${walletAddress}`, newBalance.toString());
                console.log(`‚úÖ TAMA added via localStorage: ${newBalance}`);
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage
                localStorage.setItem(`tama_balance_${walletAddress}`, newBalance.toString());
                console.log(`‚úÖ TAMA added via localStorage: ${newBalance}`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUIBalance(newBalance);

            return true;
        } catch (error) {
            console.error('‚ùå Error adding TAMA:', error);
            return false;
        }
    },

    // –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å TAMA
    async spendTAMA(walletAddress, amount, reason = 'Unknown') {
        try {
            if (!walletAddress || !amount || amount <= 0) {
                console.warn('‚ö†Ô∏è Invalid parameters for spending TAMA');
                return false;
            }

            const currentBalance = await this.getBalance(walletAddress);

            if (currentBalance < amount) {
                console.warn(`‚ö†Ô∏è Insufficient TAMA balance. Required: ${amount}, Available: ${currentBalance}`);
                return false;
            }

            console.log(`üí∞ Spending ${amount} TAMA for: ${reason}`);

            const newBalance = currentBalance - amount;

            // –í–û–ó–í–†–ê–©–ê–ï–ú TAMA –í TREASURY –ø—Ä–∏ —Ç—Ä–∞—Ç–∞—Ö
            const treasuryBalance = parseInt(localStorage.getItem('tama_balance_TREASURY_MAIN_ACCOUNT') || '0');
            const newTreasuryBalance = treasuryBalance + amount;
            localStorage.setItem('tama_balance_TREASURY_MAIN_ACCOUNT', newTreasuryBalance.toString());
            console.log(`üè¶ Treasury increased: ${treasuryBalance} ‚Üí ${newTreasuryBalance} TAMA (returned from spending)`);

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Treasury –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (this.CONFIG.USE_DATABASE && window.Database && window.Database.supabase) {
                const { error: treasuryError } = await window.Database.supabase
                    .from('leaderboard')
                    .upsert({
                        wallet_address: 'TREASURY_MAIN_ACCOUNT',
                        pet_name: 'Treasury',
                        level: 1,
                        xp: 0,
                        tama: newTreasuryBalance,
                        pet_type: 'Treasury',
                        pet_rarity: 'legendary',
                        updated_at: new Date().toISOString()
                    }, {
                        onConflict: 'wallet_address'
                    });
                
                if (treasuryError) {
                    console.error('‚ùå Treasury sync error:', treasuryError);
                } else {
                    console.log(`‚úÖ Treasury synced to database: ${newTreasuryBalance} TAMA`);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ë–ï–ó TAMA –ø–æ–ª—è)
            if (this.CONFIG.USE_DATABASE && window.Database && window.Database.supabase) {
                const { error } = await window.Database.supabase
                    .from('leaderboard')
                    .upsert({
                        wallet_address: walletAddress,
                        updated_at: new Date().toISOString()
                    }, {
                        onConflict: 'wallet_address'
                    });

                if (error) {
                    console.error('‚ùå Database error:', error);
                } else {
                    console.log(`‚úÖ Database updated (without TAMA field)`);
                }
            }
            
            // –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º localStorage
            localStorage.setItem(`tama_balance_${walletAddress}`, newBalance.toString());
            console.log(`‚úÖ TAMA spent via localStorage: ${newBalance}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUIBalance(newBalance);

            return true;
        } catch (error) {
            console.error('‚ùå Error spending TAMA:', error);
            return false;
        }
    },

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å TAMA
    async setBalance(walletAddress, amount) {
        try {
            if (!walletAddress || amount < 0) {
                console.warn('‚ö†Ô∏è Invalid parameters for setting TAMA balance');
                return false;
            }

            console.log(`üí∞ Setting TAMA balance to ${amount} for: ${walletAddress}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (this.CONFIG.USE_DATABASE && window.Database && window.Database.supabase) {
                const { error } = await window.Database.supabase
                    .from('leaderboard')
                    .upsert({
                        wallet_address: walletAddress,
                        tama: amount,
                        updated_at: new Date().toISOString()
                    }, {
                        onConflict: 'wallet_address'
                    });

                if (error) {
                    console.error('‚ùå Database error, using local storage:', error);
                    // Fallback –∫ localStorage
                    localStorage.setItem(`tama_balance_${walletAddress}`, amount.toString());
                } else {
                    console.log(`‚úÖ TAMA balance set via database: ${amount}`);
                }
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage
                localStorage.setItem(`tama_balance_${walletAddress}`, amount.toString());
                console.log(`‚úÖ TAMA balance set via localStorage: ${amount}`);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateUIBalance(amount);

            return true;
        } catch (error) {
            console.error('‚ùå Error setting TAMA balance:', error);
            return false;
        }
    },

    // –û–±–Ω–æ–≤–∏—Ç—å UI –±–∞–ª–∞–Ω—Å–∞
    updateUIBalance(balance) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ö–µ–¥–µ—Ä–µ
            const balanceElement = document.querySelector('.balance-tama');
            if (balanceElement) {
                balanceElement.textContent = `${balance} TAMA`;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
            const shopBalanceElement = document.querySelector('.shop-balance');
            if (shopBalanceElement) {
                shopBalanceElement.textContent = `${balance} TAMA`;
            }

            console.log(`üé® UI updated with balance: ${balance} TAMA`);
        } catch (error) {
            console.error('‚ùå Error updating UI balance:', error);
        }
    },

    // Sync Treasury balance to database
    async syncTreasuryToDatabase() {
        try {
            const treasuryBalance = parseInt(localStorage.getItem('tama_balance_TREASURY_MAIN_ACCOUNT') || '0');
            
            if (this.CONFIG.USE_DATABASE && window.Database && window.Database.supabase) {
                const { error } = await window.Database.supabase
                    .from('leaderboard')
                    .upsert({
                        wallet_address: 'TREASURY_MAIN_ACCOUNT',
                        pet_name: 'Treasury',
                        level: 1,
                        xp: 0,
                        tama: treasuryBalance,
                        pet_type: 'Treasury',
                        pet_rarity: 'legendary',
                        updated_at: new Date().toISOString()
                    }, {
                        onConflict: 'wallet_address'
                    });
                
                if (error) {
                    console.error('‚ùå Treasury sync error:', error);
                    return false;
                } else {
                    console.log(`‚úÖ Treasury synced to database: ${treasuryBalance} TAMA`);
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå Treasury sync error:', error);
            return false;
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
    async canAfford(walletAddress, amount) {
        try {
            const balance = await this.getBalance(walletAddress);
            return balance >= amount;
        } catch (error) {
            console.error('‚ùå Error checking affordability:', error);
            return false;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
    async getTransactionHistory(walletAddress, limit = 50) {
        try {
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é
            return [];
        } catch (error) {
            console.error('‚ùå Error getting transaction history:', error);
            return [];
        }
    },

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å
    async syncBalance(walletAddress) {
        try {
            const balance = await this.getBalance(walletAddress);
            this.updateUIBalance(balance);
            return balance;
        } catch (error) {
            console.error('‚ùå Error syncing balance:', error);
            return 0;
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    window.SimpleTAMASystem = SimpleTAMASystem.init();
    console.log('üí∞ Simple TAMA System loaded globally');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SimpleTAMASystem;
}
