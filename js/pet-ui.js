// ============================================
// üêæ PET UI MODULE - –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ü–ò–¢–û–ú–¶–ï–í
// ============================================

const PetUI = {
    
    // üéØ –ü–û–ö–ê–ó–ê–¢–¨ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–ò–¢–û–ú–¶–ï
    showPetInfo(pet) {
        if (!pet || !window.PetSystem) return;
        
        const petInfo = window.PetSystem.getPetInfo(pet);
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'pet-info-modal';
        modal.id = 'pet-info-modal';
        modal.innerHTML = `
            <div class="pet-info-content">
                <button class="close-btn" onclick="PetUI.closePetInfo()">‚úñ</button>
                
                <div class="pet-info-header">
                    <div class="pet-main-icon">${pet.emoji}</div>
                    <h2>${pet.name}</h2>
                    <div class="pet-rarity" style="color: ${petInfo.rarityInfo.color}">
                        ${petInfo.rarityInfo.emoji} ${petInfo.rarityInfo.name}
                    </div>
                </div>
                
                <div class="pet-info-tabs">
                    <button class="pet-tab active" onclick="PetUI.switchTab('stats')">üìä Stats</button>
                    <button class="pet-tab" onclick="PetUI.switchTab('abilities')">‚ö° Abilities</button>
                    <button class="pet-tab" onclick="PetUI.switchTab('evolution')">üîÑ Evolution</button>
                </div>
                
                <div class="pet-info-body">
                    <!-- STATS TAB -->
                    <div class="pet-tab-content active" id="stats-tab">
                        <div class="pet-description">
                            <p>${petInfo.typeInfo.description}</p>
                        </div>
                        
                        <div class="pet-evolution-status">
                            <h3>${petInfo.evolutionInfo.emoji} ${petInfo.evolutionInfo.name} Form</h3>
                            <p>${petInfo.evolutionInfo.description}</p>
                        </div>
                        
                        <div class="pet-stats-grid">
                            <div class="stat-item">
                                <span class="stat-label">üçñ Hunger:</span>
                                <div class="stat-bar">
                                    <div class="stat-fill" style="width: ${pet.stats.hunger}%"></div>
                                </div>
                                <span class="stat-value">${pet.stats.hunger}%</span>
                            </div>
                            
                            <div class="stat-item">
                                <span class="stat-label">‚ö° Energy:</span>
                                <div class="stat-bar">
                                    <div class="stat-fill" style="width: ${pet.stats.energy}%"></div>
                                </div>
                                <span class="stat-value">${pet.stats.energy}%</span>
                            </div>
                            
                            <div class="stat-item">
                                <span class="stat-label">üòä Happy:</span>
                                <div class="stat-bar">
                                    <div class="stat-fill" style="width: ${pet.stats.happy}%"></div>
                                </div>
                                <span class="stat-value">${pet.stats.happy}%</span>
                            </div>
                            
                            <div class="stat-item">
                                <span class="stat-label">‚ù§Ô∏è Health:</span>
                                <div class="stat-bar">
                                    <div class="stat-fill" style="width: ${pet.stats.health}%"></div>
                                </div>
                                <span class="stat-value">${pet.stats.health}%</span>
                            </div>
                        </div>
                        
                        <div class="pet-attributes">
                            <h3>üéØ Attributes</h3>
                            <div class="attributes-grid">
                                <div class="attribute-item">
                                    <span class="attr-icon">üß†</span>
                                    <span class="attr-name">Intelligence</span>
                                    <span class="attr-value">${pet.attributes.intelligence}</span>
                                </div>
                                <div class="attribute-item">
                                    <span class="attr-icon">üí™</span>
                                    <span class="attr-name">Strength</span>
                                    <span class="attr-value">${pet.attributes.strength}</span>
                                </div>
                                <div class="attribute-item">
                                    <span class="attr-icon">‚ö°</span>
                                    <span class="attr-name">Speed</span>
                                    <span class="attr-value">${pet.attributes.speed}</span>
                                </div>
                                <div class="attribute-item">
                                    <span class="attr-icon">‚ú®</span>
                                    <span class="attr-name">Magic</span>
                                    <span class="attr-value">${pet.attributes.magic}</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="pet-multipliers">
                            <div class="multiplier-item">
                                <span>üí∞ TAMA Multiplier:</span>
                                <strong>√ó${pet.tamaMultiplier.toFixed(2)}</strong>
                            </div>
                            <div class="multiplier-item">
                                <span>üìä Level:</span>
                                <strong>${pet.level}</strong>
                            </div>
                            <div class="multiplier-item">
                                <span>‚≠ê Total XP:</span>
                                <strong>${pet.total_xp || pet.xp}</strong>
                            </div>
                        </div>
                    </div>
                    
                    <!-- ABILITIES TAB -->
                    <div class="pet-tab-content" id="abilities-tab">
                        ${this.renderAbilities(pet)}
                    </div>
                    
                    <!-- EVOLUTION TAB -->
                    <div class="pet-tab-content" id="evolution-tab">
                        ${this.renderEvolution(petInfo)}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);
    },
    
    // üéØ –†–ï–ù–î–ï–† –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô
    renderAbilities(pet) {
        const abilities = window.PetSystem.getAvailableAbilities(pet);
        
        if (!abilities || abilities.length === 0) {
            return '<p style="text-align: center; color: #888;">No abilities yet</p>';
        }
        
        return `
            <div class="abilities-list">
                ${abilities.map(ability => `
                    <div class="ability-card ${ability.isReady ? 'ready' : 'cooldown'}">
                        <div class="ability-header">
                            <span class="ability-icon">${ability.emoji}</span>
                            <h3>${ability.name}</h3>
                            ${ability.isReady ? 
                                '<span class="ability-status ready">‚úÖ Ready</span>' : 
                                `<span class="ability-status cooldown">‚è≥ ${ability.cooldownRemaining}m</span>`
                            }
                        </div>
                        <p class="ability-description">${ability.description}</p>
                        ${ability.tamaBonus > 0 ? 
                            `<div class="ability-bonus">üí∞ +${(ability.tamaBonus * 100).toFixed(0)}% TAMA</div>` : 
                            ''
                        }
                        <button class="ability-btn ${ability.isReady ? '' : 'disabled'}" 
                                onclick="PetUI.useAbility('${ability.name}')"
                                ${!ability.isReady ? 'disabled' : ''}>
                            ${ability.isReady ? 'üöÄ Use Ability' : '‚è≥ On Cooldown'}
                        </button>
                    </div>
                `).join('')}
            </div>
        `;
    },
    
    // üéØ –†–ï–ù–î–ï–† –≠–í–û–õ–Æ–¶–ò–ò
    renderEvolution(petInfo) {
        const { pet, canEvolve, nextEvolutionRequirements, evolutionInfo } = petInfo;
        
        return `
            <div class="evolution-container">
                <div class="current-evolution">
                    <h3>üêæ Current Form</h3>
                    <div class="evolution-display">
                        <div class="evo-icon">${evolutionInfo.emoji}</div>
                        <div class="evo-name">${evolutionInfo.name}</div>
                        <div class="evo-desc">${evolutionInfo.description}</div>
                        <div class="evo-multiplier">Stats: √ó${evolutionInfo.statMultiplier.toFixed(1)}</div>
                    </div>
                </div>
                
                ${pet.evolution < 4 ? `
                    <div class="evolution-arrow">‚¨áÔ∏è</div>
                    
                    <div class="next-evolution">
                        <h3>üåü Next Evolution</h3>
                        ${nextEvolutionRequirements ? `
                            <div class="evolution-requirements">
                                <div class="req-item ${pet.level >= nextEvolutionRequirements.level ? 'met' : ''}">
                                    <span>üìä Level:</span>
                                    <span>${pet.level} / ${nextEvolutionRequirements.level}</span>
                                </div>
                                <div class="req-item ${(pet.total_xp || pet.xp) >= nextEvolutionRequirements.xp ? 'met' : ''}">
                                    <span>‚≠ê XP:</span>
                                    <span>${pet.total_xp || pet.xp} / ${nextEvolutionRequirements.xp}</span>
                                </div>
                                <div class="req-item" id="tama-requirement">
                                    <span>üí∞ TAMA:</span>
                                    <span>${nextEvolutionRequirements.tama} required</span>
                                </div>
                            </div>
                            
                            <button class="evolve-btn ${canEvolve ? '' : 'disabled'}" 
                                    onclick="PetUI.evolvePet()"
                                    ${!canEvolve ? 'disabled' : ''}>
                                ${canEvolve ? 'üöÄ EVOLVE NOW!' : 'üîí Requirements not met'}
                            </button>
                        ` : '<p>Maximum evolution reached!</p>'}
                    </div>
                ` : `
                    <div class="max-evolution">
                        <h3>üëë MAXIMUM EVOLUTION ACHIEVED!</h3>
                        <p>Your pet has reached its ultimate form!</p>
                    </div>
                `}
            </div>
        `;
    },
    
    // üéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –°–ü–û–°–û–ë–ù–û–°–¢–¨
    async useAbility(abilityName) {
        if (!window.Game || !window.Game.pet) {
            alert('No pet found!');
            return;
        }
        
        if (!window.WalletManager || !window.WalletManager.publicKey) {
            alert('Please connect wallet!');
            return;
        }
        
        const walletAddress = window.WalletManager.publicKey.toString();
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤—Ä–æ–¥–µ "Howl"
        let referralCount = 0;
        if (window.Database && window.Database.supabase) {
            const { data } = await window.Database.supabase
                .from('referrals')
                .select('*')
                .eq('referrer_wallet', walletAddress);
            referralCount = data ? data.length : 0;
        }
        
        const result = await window.PetSystem.useAbility(
            window.Game.pet, 
            abilityName, 
            walletAddress,
            { referralCount }
        );
        
        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.closePetInfo();
            this.showPetInfo(window.Game.pet);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.UI && window.UI.showNotification) {
                window.UI.showNotification(result.message, 'success');
            } else {
                alert(result.message);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º pet display
            if (window.Game.updatePetDisplay) {
                window.Game.updatePetDisplay();
            }
        } else {
            alert(result.message);
        }
    },
    
    // üéØ –≠–í–û–õ–Æ–¶–ò–Ø –ü–ò–¢–û–ú–¶–ê
    async evolvePet() {
        if (!window.Game || !window.Game.pet) {
            alert('No pet found!');
            return;
        }
        
        if (!window.WalletManager || !window.WalletManager.publicKey) {
            alert('Please connect wallet!');
            return;
        }
        
        const confirmed = confirm('Are you sure you want to evolve your pet? This will cost TAMA!');
        if (!confirmed) return;
        
        const walletAddress = window.WalletManager.publicKey.toString();
        const result = await window.PetSystem.evolvePet(window.Game.pet, walletAddress);
        
        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º pet –≤ –∏–≥—Ä–µ
            window.Game.pet = result.pet;
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.closePetInfo();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.UI && window.UI.showNotification) {
                window.UI.showNotification(result.message, 'success');
            } else {
                alert(result.message);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º pet display
            if (window.Game.updatePetDisplay) {
                window.Game.updatePetDisplay();
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            setTimeout(() => {
                this.showPetInfo(window.Game.pet);
            }, 500);
        } else {
            alert(result.message);
        }
    },
    
    // üéØ –ó–ê–ö–†–´–¢–¨ –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û
    closePetInfo() {
        const modal = document.getElementById('pet-info-modal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
            }, 300);
        }
    },
    
    // üéØ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–ê–ë–û–í
    switchTab(tabName) {
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
        document.querySelectorAll('.pet-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelectorAll('.pet-tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–∞–±
        event.target.classList.add('active');
        document.getElementById(`${tabName}-tab`).classList.add('active');
    },
    
    // üéØ –î–û–ë–ê–í–ò–¢–¨ –ö–ù–û–ü–ö–£ –í UI
    addPetInfoButton() {
        // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ Pet Management —Å–µ–∫—Ü–∏–∏)
        const petManagement = document.querySelector('.pet-management');
        if (!petManagement) return;
        
        const existingBtn = document.getElementById('pet-info-btn');
        if (existingBtn) return; // –ö–Ω–æ–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        const btn = document.createElement('button');
        btn.id = 'pet-info-btn';
        btn.className = 'action-btn primary';
        btn.style.width = '100%';
        btn.style.marginTop = '10px';
        btn.innerHTML = `
            üêæ PET INFO
            <small>Stats, abilities & evolution</small>
        `;
        btn.onclick = () => {
            if (window.Game && window.Game.pet) {
                this.showPetInfo(window.Game.pet);
            } else {
                alert('No pet found! Mint an NFT first.');
            }
        };
        
        petManagement.appendChild(btn);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
    window.PetUI = PetUI;
    console.log('‚úÖ PetUI loaded globally');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            PetUI.addPetInfoButton();
        });
    } else {
        PetUI.addPetInfoButton();
    }
}

