// ============================================
// TAMA TOKEN MODULE - –ü–†–û–ó–†–ê–ß–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
// ============================================

const TAMAModule = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    CONFIG: {
        SYMBOL: 'TAMA',
        DECIMALS: 9,
        USE_DATABASE: true,
        USE_SPL_TOKEN: false // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    },
    
    // –≠–∫–æ–Ω–æ–º–∏–∫–∞ TAMA
    ECONOMICS: {
        // –ó–ê–†–ê–ë–û–¢–û–ö TAMA
        EARN: {
            MINT_NFT: 500,           // –ú–∏–Ω—Ç NFT
            DAILY_LOGIN: 25,         // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥
            FEED_PET: 5,             // –ö–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
            PLAY_WITH_PET: 10,       // –ò–≥—Ä–∞ —Å –ø–∏—Ç–æ–º—Ü–µ–º
            TRAIN_PET: 15,           // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–∏—Ç–æ–º—Ü–∞
            LEVEL_UP: 50,            // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            EVOLUTION: 100,          // –≠–≤–æ–ª—é—Ü–∏—è
            ACHIEVEMENT_BRONZE: 10,  // –ë—Ä–æ–Ω–∑–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            ACHIEVEMENT_SILVER: 25,  // –°–µ—Ä–µ–±—Ä—è–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            ACHIEVEMENT_GOLD: 50,    // –ó–æ–ª–æ—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            ACHIEVEMENT_PLATINUM: 100, // –ü–ª–∞—Ç–∏–Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            REFERRAL_L1: 25,         // –†–µ—Ñ–µ—Ä–∞–ª 1 —É—Ä–æ–≤–Ω—è
            REFERRAL_L2: 12          // –†–µ—Ñ–µ—Ä–∞–ª 2 —É—Ä–æ–≤–Ω—è
        },
        
        // –¢–†–ê–¢–´ TAMA
        SPEND: {
            BUY_FOOD: 20,            // –ü–æ–∫—É–ø–∫–∞ –µ–¥—ã
            BUY_TOY: 30,             // –ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä—É—à–∫–∏
            HEAL_PET: 10,            // –õ–µ—á–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞
            EVOLVE_PET: 50,          // –≠–≤–æ–ª—é—Ü–∏—è –ø–∏—Ç–æ–º—Ü–∞
            BUY_ACCESSORY: 50,       // –ü–æ–∫—É–ø–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
            SPECIAL_ITEM: 100        // –û—Å–æ–±—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        },
        
        // –õ–∏–º–∏—Ç—ã
        DAILY_EARN_LIMIT: 1000,      // –ú–∞–∫—Å–∏–º—É–º TAMA –≤ –¥–µ–Ω—å
        MIN_BALANCE: 0               // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    },
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async init() {
        console.log('ü™ô Initializing TAMA Module...');
        
        if (this.CONFIG.USE_DATABASE && window.Database) {
            console.log('‚úÖ TAMA Module ready (database mode)');
            return true;
        }
        
        console.error('‚ùå TAMA Module initialization failed');
        return false;
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å TAMA
    async getBalance(walletAddress) {
        try {
            if (!walletAddress) {
                console.warn('‚ö†Ô∏è No wallet address provided');
                return 0;
            }
            
            if (this.CONFIG.USE_DATABASE && window.Database) {
                const playerData = await window.Database.loadPlayerData(walletAddress);
                return playerData?.tama_balance || 0;
            }
            
            return 0;
        } catch (error) {
            console.error('‚ùå Error getting TAMA balance:', error);
            return 0;
        }
    },
    
    // –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å TAMA
    async earnTAMA(walletAddress, amount, reason, details = '') {
        try {
            if (!walletAddress || !amount || amount <= 0) {
                console.warn('‚ö†Ô∏è Invalid parameters for earning TAMA');
                return false;
            }
            
            console.log(`üí∞ Earning ${amount} TAMA for: ${reason}`);
            
            if (this.CONFIG.USE_DATABASE && window.Database) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
                const dailyEarned = await this.getDailyEarned(walletAddress);
                if (dailyEarned + amount > this.ECONOMICS.DAILY_EARN_LIMIT) {
                    console.warn('‚ö†Ô∏è Daily TAMA earning limit reached');
                    return false;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                const currentBalance = await this.getBalance(walletAddress);
                const newBalance = currentBalance + amount;
                
                await window.Database.updateTAMA(walletAddress, amount, reason, details);
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                await this.recordTransaction(walletAddress, amount, 'earn', reason, details);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                this.updateUIBalance(newBalance);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showEarnNotification(amount, reason);
                
                console.log(`‚úÖ Earned ${amount} TAMA. New balance: ${newBalance}`);
                return true;
            }
            
            return false;
        } catch (error) {
            console.error('‚ùå Error earning TAMA:', error);
            return false;
        }
    },
    
    // –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å TAMA
    async spendTAMA(walletAddress, amount, reason, details = '') {
        try {
            if (!walletAddress || !amount || amount <= 0) {
                console.warn('‚ö†Ô∏è Invalid parameters for spending TAMA');
                return false;
            }
            
            const currentBalance = await this.getBalance(walletAddress);
            if (currentBalance < amount) {
                console.warn('‚ö†Ô∏è Insufficient TAMA balance');
                this.showInsufficientBalanceNotification();
                return false;
            }
            
            console.log(`üí∏ Spending ${amount} TAMA for: ${reason}`);
            
            if (this.CONFIG.USE_DATABASE && window.Database) {
                const newBalance = currentBalance - amount;
                
                await window.Database.updateTAMA(walletAddress, -amount, reason, details);
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                await this.recordTransaction(walletAddress, -amount, 'spend', reason, details);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                this.updateUIBalance(newBalance);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showSpendNotification(amount, reason);
                
                console.log(`‚úÖ Spent ${amount} TAMA. New balance: ${newBalance}`);
                return true;
            }
            
            return false;
        } catch (error) {
            console.error('‚ùå Error spending TAMA:', error);
            return false;
        }
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async getTransactionHistory(walletAddress, limit = 50) {
        try {
            if (!walletAddress) return [];
            
            if (this.CONFIG.USE_DATABASE && window.Database) {
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                const history = await window.Database.getTAMAHistory(walletAddress, limit);
                return history || [];
            }
            
            return [];
        } catch (error) {
            console.error('‚ùå Error getting TAMA history:', error);
            return [];
        }
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    async getDailyEarned(walletAddress) {
        try {
            const today = new Date().toDateString();
            const history = await this.getTransactionHistory(walletAddress, 100);
            
            const todayEarned = history
                .filter(tx => 
                    tx.type === 'earn' && 
                    new Date(tx.created_at).toDateString() === today
                )
                .reduce((sum, tx) => sum + tx.amount, 0);
            
            return todayEarned;
        } catch (error) {
            console.error('‚ùå Error getting daily earned:', error);
            return 0;
        }
    },
    
    // –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
    async recordTransaction(walletAddress, amount, type, reason, details = '') {
        try {
            if (this.CONFIG.USE_DATABASE && window.Database) {
                await window.Database.recordTAMATransaction({
                    wallet_address: walletAddress,
                    amount: amount,
                    type: type, // 'earn' or 'spend'
                    reason: reason,
                    details: details,
                    created_at: new Date().toISOString()
                });
            }
        } catch (error) {
            console.error('‚ùå Error recording TAMA transaction:', error);
        }
    },
    
    // –û–±–Ω–æ–≤–∏—Ç—å UI –±–∞–ª–∞–Ω—Å–∞
    updateUIBalance(balance) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ö–µ–¥–µ—Ä–µ
            const balanceElement = document.querySelector('.tama-balance');
            if (balanceElement) {
                balanceElement.textContent = `${balance} TAMA`;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            const allBalanceElements = document.querySelectorAll('[data-tama-balance]');
            allBalanceElements.forEach(el => {
                el.textContent = `${balance} TAMA`;
            });
        } catch (error) {
            console.error('‚ùå Error updating UI balance:', error);
        }
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ
    showEarnNotification(amount, reason) {
        try {
            if (window.Utils && window.Utils.showNotification) {
                window.Utils.showNotification(`üí∞ +${amount} TAMA - ${reason}`);
            }
        } catch (error) {
            console.error('‚ùå Error showing earn notification:', error);
        }
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∞—Ç–µ
    showSpendNotification(amount, reason) {
        try {
            if (window.Utils && window.Utils.showNotification) {
                window.Utils.showNotification(`üí∏ -${amount} TAMA - ${reason}`);
            }
        } catch (error) {
            console.error('‚ùå Error showing spend notification:', error);
        }
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
    showInsufficientBalanceNotification() {
        try {
            if (window.Utils && window.Utils.showNotification) {
                window.Utils.showNotification('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TAMA! –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏–≥—Ä–∞—è —Å –ø–∏—Ç–æ–º—Ü–µ–º!');
            }
        } catch (error) {
            console.error('‚ùå Error showing insufficient balance notification:', error);
        }
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TAMA (–¥–ª—è hover)
    showTAMADetails(walletAddress) {
        try {
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
            const modal = document.createElement('div');
            modal.className = 'tama-details-modal';
            modal.innerHTML = `
                <div class="tama-details-content">
                    <h3>ü™ô TAMA Token Details</h3>
                    <div class="tama-info">
                        <p><strong>Balance:</strong> <span id="tama-detail-balance">Loading...</span></p>
                        <p><strong>Daily Earned:</strong> <span id="tama-daily-earned">Loading...</span></p>
                        <p><strong>Daily Limit:</strong> ${this.ECONOMICS.DAILY_EARN_LIMIT} TAMA</p>
                    </div>
                    <div class="tama-economics">
                        <h4>üí∞ How to Earn TAMA:</h4>
                        <ul>
                            <li>Feed Pet: +${this.ECONOMICS.EARN.FEED_PET} TAMA</li>
                            <li>Play with Pet: +${this.ECONOMICS.EARN.PLAY_WITH_PET} TAMA</li>
                            <li>Train Pet: +${this.ECONOMICS.EARN.TRAIN_PET} TAMA</li>
                            <li>Level Up: +${this.ECONOMICS.EARN.LEVEL_UP} TAMA</li>
                            <li>Daily Login: +${this.ECONOMICS.EARN.DAILY_LOGIN} TAMA</li>
                        </ul>
                        <h4>üí∏ How to Spend TAMA:</h4>
                        <ul>
                            <li>Buy Food: -${this.ECONOMICS.SPEND.BUY_FOOD} TAMA</li>
                            <li>Buy Toy: -${this.ECONOMICS.SPEND.BUY_TOY} TAMA</li>
                            <li>Heal Pet: -${this.ECONOMICS.SPEND.HEAL_PET} TAMA</li>
                            <li>Evolve Pet: -${this.ECONOMICS.SPEND.EVOLVE_PET} TAMA</li>
                        </ul>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()">Close</button>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            this.loadTAMADetails(walletAddress);
        } catch (error) {
            console.error('‚ùå Error showing TAMA details:', error);
        }
    },
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ TAMA
    async loadTAMADetails(walletAddress) {
        try {
            const balance = await this.getBalance(walletAddress);
            const dailyEarned = await this.getDailyEarned(walletAddress);
            
            const balanceElement = document.getElementById('tama-detail-balance');
            const dailyElement = document.getElementById('tama-daily-earned');
            
            if (balanceElement) balanceElement.textContent = `${balance} TAMA`;
            if (dailyElement) dailyElement.textContent = `${dailyEarned} TAMA`;
        } catch (error) {
            console.error('‚ùå Error loading TAMA details:', error);
        }
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.TAMAModule = TAMAModule;

console.log('‚úÖ TAMA Module loaded');

