// ============================================
// üè¶ TREASURY SYSTEM - –ì–õ–ê–í–ù–´–ô –°–ß–ï–¢ TAMA
// ============================================

const TreasurySystem = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    CONFIG: {
        TREASURY_WALLET: 'TREASURY_MAIN_ACCOUNT',
        INITIAL_SUPPLY: 1000000000, // 1 –º–∏–ª–ª–∏–∞—Ä–¥ TAMA
        NEW_USER_BONUS: 1000, // 1000 TAMA –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        MINT_REWARD: 1000, // 1000 TAMA –∑–∞ –º–∏–Ω—Ç NFT
        DAILY_BONUS: 50, // 50 TAMA –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async init() {
        console.log('üè¶ Initializing Treasury System...');
        
        // –°–æ–∑–¥–∞–µ–º Treasury –∫–æ—à–µ–ª–µ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await this.ensureTreasuryExists();
        
        console.log('üè¶ Treasury System initialized');
        return this;
    },

    // –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ Treasury —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¢–û–õ–¨–ö–û 1 –†–ê–ó!)
    async ensureTreasuryExists() {
        try {
            if (window.SimpleTAMASystem) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ Treasury –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const treasuryExists = await this.checkTreasuryExists();
                
                if (!treasuryExists) {
                    console.log('üè¶ Creating Treasury with initial supply (FIRST TIME ONLY)...');
                    // –°–æ–∑–¥–∞–µ–º Treasury —á–µ—Ä–µ–∑ localStorage (–±–µ–∑ Supabase)
                    localStorage.setItem(`tama_balance_${this.CONFIG.TREASURY_WALLET}`, this.CONFIG.INITIAL_SUPPLY.toString());
                    console.log(`‚úÖ Treasury created ONCE with ${this.CONFIG.INITIAL_SUPPLY} TAMA`);
                } else {
                    const treasuryBalance = await window.SimpleTAMASystem.getBalance(this.CONFIG.TREASURY_WALLET);
                    console.log(`üè¶ Treasury already exists with ${treasuryBalance} TAMA`);
                }
            }
        } catch (error) {
            console.error('‚ùå Error ensuring treasury exists:', error);
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ Treasury –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async checkTreasuryExists() {
        try {
            if (window.Database && window.Database.supabase) {
                const { data, error } = await window.Database.supabase
                    .from('leaderboard')
                    .select('wallet_address')
                    .eq('wallet_address', this.CONFIG.TREASURY_WALLET)
                    .single();
                
                return !error && data !== null;
            }
            return false;
        } catch (error) {
            console.error('‚ùå Error checking treasury existence:', error);
            return false;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å Treasury
    async getTreasuryBalance() {
        try {
            if (window.SimpleTAMASystem) {
                return await window.SimpleTAMASystem.getBalance(this.CONFIG.TREASURY_WALLET);
            }
            return 0;
        } catch (error) {
            console.error('‚ùå Error getting treasury balance:', error);
            return 0;
        }
    },

    // –ù–∞—á–∏—Å–ª–∏—Ç—å TAMA –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async awardNewUser(walletAddress) {
        try {
            if (!walletAddress) {
                console.warn('‚ö†Ô∏è No wallet address provided for new user award');
                return false;
            }

            console.log(`üè¶ Awarding new user bonus to ${walletAddress}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π (–Ω–µ –ø–æ–ª—É—á–∞–ª –±–æ–Ω—É—Å —Ä–∞–Ω–µ–µ)
            const bonusReceived = localStorage.getItem(`tama_new_user_bonus_${walletAddress}`);
            if (bonusReceived === 'true') {
                console.log('üë§ User already received new user bonus');
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Treasury –º–æ–∂–µ—Ç –Ω–∞—á–∏—Å–ª–∏—Ç—å
            const canAward = await this.canAward(this.CONFIG.NEW_USER_BONUS);
            if (!canAward) {
                console.warn('‚ö†Ô∏è Treasury insufficient funds for new user bonus');
                return false;
            }

            // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ò–ó TREASURY
            if (window.SimpleTAMASystem) {
                const success = await window.SimpleTAMASystem.addTAMAFromTreasury(
                    walletAddress, 
                    this.CONFIG.NEW_USER_BONUS, 
                    'New User Welcome Bonus'
                );
                
                if (success) {
                    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω
                    localStorage.setItem(`tama_new_user_bonus_${walletAddress}`, 'true');
                    console.log(`‚úÖ New user bonus awarded: ${this.CONFIG.NEW_USER_BONUS} TAMA`);
                    return true;
                }
            }

            return false;
        } catch (error) {
            console.error('‚ùå Error awarding new user:', error);
            return false;
        }
    },

    // –ù–∞—á–∏—Å–ª–∏—Ç—å TAMA –∑–∞ –º–∏–Ω—Ç NFT (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π)
    async awardMintReward(walletAddress) {
        try {
            if (!walletAddress) {
                console.warn('‚ö†Ô∏è No wallet address provided for mint reward');
                return false;
            }

            console.log(`üè¶ Awarding mint reward to ${walletAddress}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–ª mint reward —Ä–∞–Ω–µ–µ
            const mintRewardReceived = localStorage.getItem(`tama_mint_reward_${walletAddress}`);
            if (mintRewardReceived === 'true') {
                console.log('üë§ User already received mint reward');
                return false;
            }

            if (window.SimpleTAMASystem) {
                const success = await window.SimpleTAMASystem.addTAMAFromTreasury(
                    walletAddress, 
                    this.CONFIG.MINT_REWARD, 
                    'NFT Mint Reward'
                );
                
                if (success) {
                    // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ mint reward –ø–æ–ª—É—á–µ–Ω
                    localStorage.setItem(`tama_mint_reward_${walletAddress}`, 'true');
                    console.log(`‚úÖ Mint reward awarded: ${this.CONFIG.MINT_REWARD} TAMA`);
                    return true;
                }
            }

            return false;
        } catch (error) {
            console.error('‚ùå Error awarding mint reward:', error);
            return false;
        }
    },

    // –ù–∞—á–∏—Å–ª–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
    async awardDailyReward(walletAddress) {
        try {
            if (!walletAddress) {
                console.warn('‚ö†Ô∏è No wallet address provided for daily reward');
                return false;
            }

            console.log(`üè¶ Awarding daily reward to ${walletAddress}`);

            if (window.SimpleTAMASystem) {
                const success = await window.SimpleTAMASystem.addTAMAFromTreasury(
                    walletAddress, 
                    this.CONFIG.DAILY_BONUS, 
                    'Daily Login Reward'
                );
                
                if (success) {
                    console.log(`‚úÖ Daily reward awarded: ${this.CONFIG.DAILY_BONUS} TAMA`);
                    return true;
                }
            }

            return false;
        } catch (error) {
            console.error('‚ùå Error awarding daily reward:', error);
            return false;
        }
    },

    // –ü–æ–ø–æ–ª–Ω–∏—Ç—å Treasury (–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è)
    async refillTreasury(amount) {
        try {
            if (!amount || amount <= 0) {
                console.warn('‚ö†Ô∏è Invalid amount for treasury refill');
                return false;
            }

            console.log(`üè¶ Refilling treasury with ${amount} TAMA`);

            if (window.SimpleTAMASystem) {
                const currentBalance = await this.getTreasuryBalance();
                const newBalance = currentBalance + amount;
                
                const success = await window.SimpleTAMASystem.setBalance(
                    this.CONFIG.TREASURY_WALLET, 
                    newBalance
                );
                
                if (success) {
                    console.log(`‚úÖ Treasury refilled: ${currentBalance} ‚Üí ${newBalance} TAMA`);
                    return true;
                }
            }

            return false;
        } catch (error) {
            console.error('‚ùå Error refilling treasury:', error);
            return false;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Treasury
    async getTreasuryStats() {
        try {
            const treasuryBalance = await this.getTreasuryBalance();
            const totalSupply = this.CONFIG.INITIAL_SUPPLY;
            const distributed = totalSupply - treasuryBalance;
            const distributionPercent = (distributed / totalSupply) * 100;

            return {
                treasuryBalance,
                totalSupply,
                distributed,
                distributionPercent: distributionPercent.toFixed(2),
                newUserBonus: this.CONFIG.NEW_USER_BONUS,
                mintReward: this.CONFIG.MINT_REWARD,
                dailyBonus: this.CONFIG.DAILY_BONUS
            };
        } catch (error) {
            console.error('‚ùå Error getting treasury stats:', error);
            return null;
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ Treasury –Ω–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
    async canAward(amount) {
        try {
            const treasuryBalance = await this.getTreasuryBalance();
            return treasuryBalance >= amount;
        } catch (error) {
            console.error('‚ùå Error checking treasury capacity:', error);
            return false;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥ Treasury
    async getTreasuryHistory(limit = 50) {
        try {
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É treasury_transactions
            return [];
        } catch (error) {
            console.error('‚ùå Error getting treasury history:', error);
            return [];
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    window.TreasurySystem = await TreasurySystem.init();
    console.log('üè¶ Treasury System loaded globally');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TreasurySystem;
}
