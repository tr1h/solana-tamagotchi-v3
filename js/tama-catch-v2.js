/**
 * üéÆ TAMA CATCH V2 - –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∏–Ω–∏-–∏–≥—Ä–∞
 * –õ–æ–≤–∏ –ø–∞–¥–∞—é—â–∏–µ TAMA —Ç–æ–∫–µ–Ω—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏!
 */

class TAMACatchGameV2 {
    constructor() {
        this.canvas = null;
        this.ctx = null;
        this.gameRunning = false;
        this.score = 0;
        this.timeLeft = 60; // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—Ä–µ–º—è –¥–æ 60 —Å–µ–∫—É–Ω–¥
        this.tamaTokens = [];
        this.bombs = []; // –î–æ–±–∞–≤–∏–ª–∏ –±–æ–º–±—ã
        this.powerUps = []; // –î–æ–±–∞–≤–∏–ª–∏ –±–æ–Ω—É—Å—ã
        this.player = { x: 0, y: 0, width: 60, height: 60 };
        this.keys = {};
        this.lastSpawn = 0;
        this.spawnRate = 800; // –£—Å–∫–æ—Ä–∏–ª–∏ —Å–ø–∞–≤–Ω
        this.gravity = 2.5;
        this.speed = 4;
        this.level = 1;
        this.combo = 0;
        this.maxCombo = 0;
        this.gameState = 'menu'; // menu, playing, paused, gameOver
        this.animationFrame = null;
        this.timerInterval = null;
        this.lastClickTime = 0;
        
        this.init();
    }

    init() {
        // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –∏–≥—Ä—ã
        this.canvas = document.createElement('canvas');
        this.canvas.width = 500;
        this.canvas.height = 600;
        this.canvas.style.cssText = `
            border: 3px solid #FFD700;
            border-radius: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: block;
            margin: 20px auto;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            cursor: pointer;
        `;
        
        this.ctx = this.canvas.getContext('2d');
        this.setupEventListeners();
    }

    setupEventListeners() {
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        document.addEventListener('keydown', (e) => {
            if (this.gameState === 'playing') {
                this.keys[e.code] = true;
                
                // –ü–∞—É–∑–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª
                if (e.code === 'Space') {
                    e.preventDefault();
                    this.togglePause();
                }
            }
        });
        
        document.addEventListener('keyup', (e) => {
            this.keys[e.code] = false;
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é/—Ç–∞—á
        this.canvas.addEventListener('mousemove', (e) => {
            if (this.gameState === 'playing') {
                const rect = this.canvas.getBoundingClientRect();
                this.player.x = e.clientX - rect.left - this.player.width / 2;
            }
        });

        this.canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            if (this.gameState === 'playing') {
                const rect = this.canvas.getBoundingClientRect();
                const touch = e.touches[0];
                this.player.x = touch.clientX - rect.left - this.player.width / 2;
            }
        });

        // –ö–ª–∏–∫–∏ –ø–æ canvas –¥–ª—è –∫–Ω–æ–ø–æ–∫
        this.canvas.addEventListener('click', (e) => {
            const now = Date.now();
            if (now - this.lastClickTime < 300) return;
            this.lastClickTime = now;
            
            const rect = this.canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            this.handleClick(x, y);
        });
    }

    handleClick(x, y) {
        if (this.gameState === 'menu') {
            // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
            if (this.isPointInButton(x, y, 150, 400, 200, 50)) {
                this.startGame();
            }
        } else if (this.gameState === 'paused') {
            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            if (this.isPointInButton(x, y, 150, 350, 200, 50)) {
                this.resumeGame();
            }
            // –ö–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥"
            if (this.isPointInButton(x, y, 150, 420, 200, 50)) {
                this.endGame();
            }
        } else if (this.gameState === 'gameOver') {
            // –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
            if (this.isPointInButton(x, y, 150, 450, 200, 50)) {
                this.resetGame();
            }
            // –ö–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥"
            if (this.isPointInButton(x, y, 150, 520, 200, 50)) {
                this.closeGame();
            }
        }
    }

    isPointInButton(x, y, bx, by, bw, bh) {
        return x >= bx && x <= bx + bw && y >= by && y <= by + bh;
    }

    startGame() {
        this.gameState = 'playing';
        this.gameRunning = true;
        this.score = 0;
        this.timeLeft = 60;
        this.tamaTokens = [];
        this.bombs = [];
        this.powerUps = [];
        this.level = 1;
        this.combo = 0;
        this.maxCombo = 0;
        this.player.x = this.canvas.width / 2 - this.player.width / 2;
        this.player.y = this.canvas.height - this.player.height - 20;
        
        this.gameLoop();
        this.timerInterval = setInterval(() => {
            this.timeLeft--;
            if (this.timeLeft <= 0) {
                this.endGame();
            }
        }, 1000);
    }

    togglePause() {
        if (this.gameState === 'playing') {
            this.gameState = 'paused';
            clearInterval(this.timerInterval);
        } else if (this.gameState === 'paused') {
            this.resumeGame();
        }
    }

    resumeGame() {
        this.gameState = 'playing';
        this.timerInterval = setInterval(() => {
            this.timeLeft--;
            if (this.timeLeft <= 0) {
                this.endGame();
            }
        }, 1000);
    }

    endGame() {
        this.gameState = 'gameOver';
        this.gameRunning = false;
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }
        
        // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º TAMA –∑–∞ –∏–≥—Ä—É –ò–ó TREASURY
        const earnedTAMA = this.calculateTAMAReward();
        
        if (earnedTAMA > 0 && window.SimpleTAMASystem && window.WalletManager && window.WalletManager.publicKey) {
            window.SimpleTAMASystem.addTAMAFromTreasury(
                window.WalletManager.publicKey.toString(),
                earnedTAMA,
                `TAMA Catch Game: ${this.score} points, Level ${this.level}, Max Combo ${this.maxCombo}`
            ).then(() => {
                console.log(`‚úÖ ${earnedTAMA} TAMA awarded from Treasury for TAMA Catch game`);
            }).catch(error => {
                console.error('Error awarding TAMA:', error);
            });
        }
        
        this.showGameOver(earnedTAMA);
    }

    calculateTAMAReward() {
        // –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–∞–≥—Ä–∞–¥—ã
        let baseReward = Math.floor(this.score / 10); // 1 TAMA –∑–∞ 10 –æ—á–∫–æ–≤
        let levelBonus = this.level * 2; // –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        let comboBonus = Math.floor(this.maxCombo / 5); // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–±–æ
        let timeBonus = Math.floor((60 - this.timeLeft) / 10); // –ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è
        
        let totalReward = baseReward + levelBonus + comboBonus + timeBonus;
        
        // –ú–∞–∫—Å–∏–º—É–º 100 TAMA –∑–∞ –∏–≥—Ä—É
        return Math.min(totalReward, 100);
    }

    showGameOver(earnedTAMA) {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.drawBackground();
        
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        this.ctx.fillStyle = '#FFD700';
        this.ctx.font = 'bold 28px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('üéÆ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!', this.canvas.width / 2, 80);
        
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = '20px Arial';
        this.ctx.fillText(`–û—á–∫–∏: ${this.score}`, this.canvas.width / 2, 130);
        this.ctx.fillText(`–£—Ä–æ–≤–µ–Ω—å: ${this.level}`, this.canvas.width / 2, 160);
        this.ctx.fillText(`–ú–∞–∫—Å. –∫–æ–º–±–æ: ${this.maxCombo}`, this.canvas.width / 2, 190);
        
        if (earnedTAMA > 0) {
            this.ctx.fillStyle = '#00FF00';
            this.ctx.font = 'bold 24px Arial';
            this.ctx.fillText(`üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${earnedTAMA} TAMA!`, this.canvas.width / 2, 240);
        }
        
        // –ö–Ω–æ–ø–∫–∏
        this.drawButton(150, 450, 200, 50, '#4ECDC4', 'üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞');
        this.drawButton(150, 520, 200, 50, '#FF6B6B', '‚ùå –í—ã—Ö–æ–¥');
    }

    showMenu() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.drawBackground();
        
        this.ctx.fillStyle = '#FFD700';
        this.ctx.font = 'bold 32px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('üéÆ TAMA CATCH', this.canvas.width / 2, 100);
        
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = '18px Arial';
        this.ctx.fillText('–õ–æ–≤–∏—Ç–µ –ø–∞–¥–∞—é—â–∏–µ TAMA —Ç–æ–∫–µ–Ω—ã!', this.canvas.width / 2, 140);
        this.ctx.fillText('–ò–∑–±–µ–≥–∞–π—Ç–µ –±–æ–º–±!', this.canvas.width / 2, 170);
        this.ctx.fillText('–°–æ–±–∏—Ä–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!', this.canvas.width / 2, 200);
        
        this.ctx.fillStyle = '#FFD700';
        this.ctx.font = 'bold 16px Arial';
        this.ctx.fillText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', this.canvas.width / 2, 250);
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = '14px Arial';
        this.ctx.fillText('–ú—ã—à—å/–¢–∞—á - –¥–≤–∏–∂–µ–Ω–∏–µ', this.canvas.width / 2, 280);
        this.ctx.fillText('–ü—Ä–æ–±–µ–ª - –ø–∞—É–∑–∞', this.canvas.width / 2, 300);
        
        this.ctx.fillStyle = '#FFD700';
        this.ctx.font = 'bold 16px Arial';
        this.ctx.fillText('–ù–∞–≥—Ä–∞–¥—ã:', this.canvas.width / 2, 340);
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = '14px Arial';
        this.ctx.fillText('1 TAMA –∑–∞ 10 –æ—á–∫–æ–≤ + –±–æ–Ω—É—Å—ã', this.canvas.width / 2, 370);
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
        this.drawButton(150, 400, 200, 50, '#4ECDC4', 'üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É');
    }

    showPause() {
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        
        this.ctx.fillStyle = '#FFD700';
        this.ctx.font = 'bold 28px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('‚è∏Ô∏è –ü–ê–£–ó–ê', this.canvas.width / 2, 200);
        
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = '18px Arial';
        this.ctx.fillText(`–û—á–∫–∏: ${this.score}`, this.canvas.width / 2, 250);
        this.ctx.fillText(`–í—Ä–µ–º—è: ${this.timeLeft}—Å`, this.canvas.width / 2, 280);
        this.ctx.fillText(`–£—Ä–æ–≤–µ–Ω—å: ${this.level}`, this.canvas.width / 2, 310);
        
        // –ö–Ω–æ–ø–∫–∏
        this.drawButton(150, 350, 200, 50, '#4ECDC4', '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å');
        this.drawButton(150, 420, 200, 50, '#FF6B6B', '‚ùå –í—ã—Ö–æ–¥');
    }

    drawBackground() {
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        const gradient = this.ctx.createLinearGradient(0, 0, 0, this.canvas.height);
        gradient.addColorStop(0, '#667eea');
        gradient.addColorStop(1, '#764ba2');
        this.ctx.fillStyle = gradient;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }

    gameLoop() {
        if (!this.gameRunning) return;
        
        if (this.gameState === 'playing') {
            this.update();
            this.draw();
        } else if (this.gameState === 'paused') {
            this.showPause();
        }
        
        this.animationFrame = requestAnimationFrame(() => this.gameLoop());
    }

    update() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        this.level = Math.floor(this.score / 100) + 1;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å —É—Ä–æ–≤–Ω–µ–º
        this.spawnRate = Math.max(300, 800 - (this.level * 50));
        this.gravity = Math.min(5, 2.5 + (this.level * 0.2));
        
        // –°–ø–∞–≤–Ω –æ–±—ä–µ–∫—Ç–æ–≤
        const now = Date.now();
        if (now - this.lastSpawn > this.spawnRate) {
            this.spawnObject();
            this.lastSpawn = now;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º TAMA —Ç–æ–∫–µ–Ω—ã
        this.tamaTokens = this.tamaTokens.filter(token => {
            token.y += this.gravity;
            return token.y < this.canvas.height;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–º–±—ã
        this.bombs = this.bombs.filter(bomb => {
            bomb.y += this.gravity * 1.2;
            return bomb.y < this.canvas.height;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã
        this.powerUps = this.powerUps.filter(powerUp => {
            powerUp.y += this.gravity * 0.8;
            return powerUp.y < this.canvas.height;
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
        this.checkCollisions();
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if (this.keys['ArrowLeft'] && this.player.x > 0) {
            this.player.x -= this.speed;
        }
        if (this.keys['ArrowRight'] && this.player.x < this.canvas.width - this.player.width) {
            this.player.x += this.speed;
        }
    }

    spawnObject() {
        const rand = Math.random();
        
        if (rand < 0.6) {
            // TAMA —Ç–æ–∫–µ–Ω (60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            this.tamaTokens.push({
                x: Math.random() * (this.canvas.width - 30),
                y: -30,
                width: 30,
                height: 30,
                value: Math.floor(Math.random() * 3) + 1, // 1-3 –æ—á–∫–∞
                type: 'tama'
            });
        } else if (rand < 0.8) {
            // –ë–æ–º–±–∞ (20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            this.bombs.push({
                x: Math.random() * (this.canvas.width - 30),
                y: -30,
                width: 30,
                height: 30,
                type: 'bomb'
            });
        } else {
            // –ë–æ–Ω—É—Å (20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            this.powerUps.push({
                x: Math.random() * (this.canvas.width - 30),
                y: -30,
                width: 30,
                height: 30,
                type: Math.random() < 0.5 ? 'multiplier' : 'time',
                value: Math.random() < 0.5 ? 2 : 10 // x2 –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏–ª–∏ +10 —Å–µ–∫—É–Ω–¥
            });
        }
    }

    checkCollisions() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å TAMA —Ç–æ–∫–µ–Ω–∞–º–∏
        this.tamaTokens.forEach((token, index) => {
            if (this.isColliding(this.player, token)) {
                this.score += token.value;
                this.combo++;
                this.maxCombo = Math.max(this.maxCombo, this.combo);
                this.tamaTokens.splice(index, 1);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –±–æ–º–±–∞–º–∏
        this.bombs.forEach((bomb, index) => {
            if (this.isColliding(this.player, bomb)) {
                this.combo = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ
                this.timeLeft = Math.max(0, this.timeLeft - 5); // -5 —Å–µ–∫—É–Ω–¥
                this.bombs.splice(index, 1);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –±–æ–Ω—É—Å–∞–º–∏
        this.powerUps.forEach((powerUp, index) => {
            if (this.isColliding(this.player, powerUp)) {
                if (powerUp.type === 'multiplier') {
                    this.score += 10; // –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—å
                } else if (powerUp.type === 'time') {
                    this.timeLeft += powerUp.value; // +10 —Å–µ–∫—É–Ω–¥
                }
                this.powerUps.splice(index, 1);
            }
        });
    }

    isColliding(rect1, rect2) {
        return rect1.x < rect2.x + rect2.width &&
               rect1.x + rect1.width > rect2.x &&
               rect1.y < rect2.y + rect2.height &&
               rect1.y + rect1.height > rect2.y;
    }

    draw() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.drawBackground();
        
        // –†–∏—Å—É–µ–º TAMA —Ç–æ–∫–µ–Ω—ã
        this.tamaTokens.forEach(token => {
            this.ctx.fillStyle = '#FFD700';
            this.ctx.fillRect(token.x, token.y, token.width, token.height);
            this.ctx.fillStyle = '#000';
            this.ctx.font = 'bold 16px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.fillText('üí∞', token.x + token.width/2, token.y + token.height/2 + 5);
        });
        
        // –†–∏—Å—É–µ–º –±–æ–º–±—ã
        this.bombs.forEach(bomb => {
            this.ctx.fillStyle = '#FF0000';
            this.ctx.fillRect(bomb.x, bomb.y, bomb.width, bomb.height);
            this.ctx.fillStyle = '#FFF';
            this.ctx.font = 'bold 16px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.fillText('üí£', bomb.x + bomb.width/2, bomb.y + bomb.height/2 + 5);
        });
        
        // –†–∏—Å—É–µ–º –±–æ–Ω—É—Å—ã
        this.powerUps.forEach(powerUp => {
            this.ctx.fillStyle = powerUp.type === 'multiplier' ? '#00FF00' : '#00BFFF';
            this.ctx.fillRect(powerUp.x, powerUp.y, powerUp.width, powerUp.height);
            this.ctx.fillStyle = '#FFF';
            this.ctx.font = 'bold 16px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.fillText(powerUp.type === 'multiplier' ? '‚ö°' : '‚è∞', powerUp.x + powerUp.width/2, powerUp.y + powerUp.height/2 + 5);
        });
        
        // –†–∏—Å—É–µ–º –∏–≥—Ä–æ–∫–∞
        this.ctx.fillStyle = '#4ECDC4';
        this.ctx.fillRect(this.player.x, this.player.y, this.player.width, this.player.height);
        this.ctx.fillStyle = '#FFF';
        this.ctx.font = 'bold 20px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('üêæ', this.player.x + this.player.width/2, this.player.y + this.player.height/2 + 7);
        
        // –†–∏—Å—É–µ–º UI
        this.drawUI();
    }

    drawUI() {
        // –§–æ–Ω –¥–ª—è UI
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
        this.ctx.fillRect(0, 0, this.canvas.width, 60);
        
        // –û—á–∫–∏
        this.ctx.fillStyle = '#FFD700';
        this.ctx.font = 'bold 20px Arial';
        this.ctx.textAlign = 'left';
        this.ctx.fillText(`–û—á–∫–∏: ${this.score}`, 10, 25);
        
        // –í—Ä–µ–º—è
        this.ctx.fillStyle = '#00FF00';
        this.ctx.fillText(`–í—Ä–µ–º—è: ${this.timeLeft}—Å`, 10, 50);
        
        // –£—Ä–æ–≤–µ–Ω—å
        this.ctx.fillStyle = '#FF6B6B';
        this.ctx.textAlign = 'right';
        this.ctx.fillText(`–£—Ä–æ–≤–µ–Ω—å: ${this.level}`, this.canvas.width - 10, 25);
        
        // –ö–æ–º–±–æ
        this.ctx.fillStyle = '#FF00FF';
        this.ctx.fillText(`–ö–æ–º–±–æ: ${this.combo}`, this.canvas.width - 10, 50);
        
        // –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã
        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
        this.ctx.fillRect(this.canvas.width - 60, 5, 50, 20);
        this.ctx.fillStyle = '#FFF';
        this.ctx.font = '12px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('‚è∏Ô∏è', this.canvas.width - 35, 18);
    }

    drawButton(x, y, width, height, color, text) {
        // –¢–µ–Ω—å –∫–Ω–æ–ø–∫–∏
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';
        this.ctx.fillRect(x + 2, y + 2, width, height);
        
        // –ö–Ω–æ–ø–∫–∞
        this.ctx.fillStyle = color;
        this.ctx.fillRect(x, y, width, height);
        
        // –ì—Ä–∞–Ω–∏—Ü–∞ –∫–Ω–æ–ø–∫–∏
        this.ctx.strokeStyle = '#FFFFFF';
        this.ctx.lineWidth = 2;
        this.ctx.strokeRect(x, y, width, height);
        
        // –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = 'bold 16px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText(text, x + width / 2, y + height / 2 + 5);
    }

    resetGame() {
        this.gameState = 'menu';
        this.showMenu();
    }

    closeGame() {
        this.gameRunning = false;
        if (this.animationFrame) {
            cancelAnimationFrame(this.animationFrame);
        }
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
        }
        
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.getElementById('tama-catch-modal');
        if (modal) {
            document.body.removeChild(modal);
        }
    }

    getCanvas() {
        return this.canvas;
    }

    show() {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–≥—Ä—ã
        const modal = document.createElement('div');
        modal.id = 'tama-catch-modal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        `;

        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
            background: #1D3557;
            border: 3px solid #FFD700;
            border-radius: 15px;
            padding: 20px;
            max-width: 90%;
            max-height: 90%;
            overflow: auto;
            position: relative;
        `;

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = '‚ùå';
        closeBtn.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            background: #FF6B6B;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            color: white;
            font-size: 16px;
            cursor: pointer;
        `;
        closeBtn.addEventListener('click', () => {
            this.closeGame();
        });

        modalContent.appendChild(closeBtn);
        modalContent.appendChild(this.canvas);
        modal.appendChild(modalContent);
        document.body.appendChild(modal);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        this.gameState = 'menu';
        this.showMenu();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
window.TAMACatchGameV2 = TAMACatchGameV2;
