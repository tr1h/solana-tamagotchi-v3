// –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT –≤ –∫–æ—à–µ–ª—å–∫–µ
const { Connection, PublicKey } = require('@solana/web3.js');

async function checkNFTs() {
    const wallet = 'BFFQEo2b2d9rbXNGLX76RZHoNpbph39F8UPPKZDsie9r'; // –¢–≤–æ–π –∫–æ—à–µ–ª—ë–∫
    
    const connection = new Connection('https://api.devnet.solana.com');
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞:', wallet);
    console.log('');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(
        new PublicKey(wallet),
        { programId: new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA') }
    );
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${tokenAccounts.value.length} —Ç–æ–∫–µ–Ω–æ–≤`);
    console.log('');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º NFT (amount = 1, decimals = 0)
    const nfts = tokenAccounts.value.filter(ta => {
        const amount = ta.account.data.parsed.info.tokenAmount;
        return amount.decimals === 0 && amount.uiAmount === 1;
    });
    
    console.log(`üé® –ù–∞–π–¥–µ–Ω–æ ${nfts.length} NFT:`);
    console.log('');
    
    nfts.forEach((nft, i) => {
        const mint = nft.account.data.parsed.info.mint;
        console.log(`${i + 1}. NFT Mint: ${mint}`);
        console.log(`   Token Account: ${nft.pubkey.toString()}`);
        console.log(`   Explorer: https://explorer.solana.com/address/${mint}?cluster=devnet`);
        console.log('');
    });
    
    if (nfts.length === 0) {
        console.log('‚ùå NFT –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
        console.log('');
        console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('   1. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
        console.log('   2. –ú–∏–Ω—Ç –Ω–µ –ø—Ä–æ—à—ë–ª (–ø—Ä–æ–≤–µ—Ä—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é)');
        console.log('   3. NFT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π –∫–æ—à–µ–ª—ë–∫');
    }
}

checkNFTs().catch(console.error);




