-- ============================================
-- üí∞ TAMA DOUBLE-ENTRY ACCOUNTING SYSTEM
-- ============================================

-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TAMA
CREATE TABLE IF NOT EXISTS tama_transactions (
    id TEXT PRIMARY KEY,
    wallet_address TEXT NOT NULL,
    operation_type TEXT NOT NULL,
    amount DECIMAL(18,8) NOT NULL,
    balance_before DECIMAL(18,8) NOT NULL,
    balance_after DECIMAL(18,8) NOT NULL,
    description TEXT NOT NULL,
    metadata JSONB DEFAULT '{}',
    entry_type TEXT NOT NULL CHECK (entry_type IN ('DEBIT', 'CREDIT')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
CREATE INDEX IF NOT EXISTS idx_tama_transactions_wallet ON tama_transactions(wallet_address);
CREATE INDEX IF NOT EXISTS idx_tama_transactions_type ON tama_transactions(operation_type);
CREATE INDEX IF NOT EXISTS idx_tama_transactions_date ON tama_transactions(created_at);
CREATE INDEX IF NOT EXISTS idx_tama_transactions_entry_type ON tama_transactions(entry_type);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
CREATE INDEX IF NOT EXISTS idx_tama_transactions_wallet_date ON tama_transactions(wallet_address, created_at DESC);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_tama_transactions_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
DROP TRIGGER IF EXISTS trigger_update_tama_transactions_updated_at ON tama_transactions;
CREATE TRIGGER trigger_update_tama_transactions_updated_at
    BEFORE UPDATE ON tama_transactions
    FOR EACH ROW
    EXECUTE FUNCTION update_tama_transactions_updated_at();

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
CREATE OR REPLACE FUNCTION check_tama_balance(wallet_addr TEXT)
RETURNS DECIMAL(18,8) AS $$
DECLARE
    current_balance DECIMAL(18,8);
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ leaderboard
    SELECT COALESCE(tama, 0) INTO current_balance
    FROM leaderboard
    WHERE wallet_address = wallet_addr;
    
    -- –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
    IF current_balance IS NULL THEN
        INSERT INTO leaderboard (wallet_address, tama, xp, level, created_at, updated_at)
        VALUES (wallet_addr, 0, 0, 1, NOW(), NOW())
        ON CONFLICT (wallet_address) DO NOTHING;
        
        current_balance := 0;
    END IF;
    
    RETURN current_balance;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
CREATE OR REPLACE FUNCTION create_tama_transaction(
    p_wallet_address TEXT,
    p_operation_type TEXT,
    p_amount DECIMAL(18,8),
    p_description TEXT,
    p_metadata JSONB DEFAULT '{}'
)
RETURNS TEXT AS $$
DECLARE
    transaction_id TEXT;
    balance_before DECIMAL(18,8);
    balance_after DECIMAL(18,8);
    entry_type TEXT;
    actual_amount DECIMAL(18,8);
BEGIN
    -- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction_id := 'tama_' || EXTRACT(EPOCH FROM NOW())::TEXT || '_' || substr(md5(random()::text), 1, 9);
    
    -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    balance_before := check_tama_balance(p_wallet_address);
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    IF p_operation_type IN (
        'MINT_REWARD', 'DAILY_LOGIN', 'PET_CLICK', 'MINIGAME_WIN',
        'REFERRAL_REWARD', 'ACHIEVEMENT_REWARD', 'ADMIN_BONUS'
    ) THEN
        entry_type := 'DEBIT';
        actual_amount := ABS(p_amount);
    ELSE
        entry_type := 'CREDIT';
        actual_amount := -ABS(p_amount);
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    IF entry_type = 'CREDIT' AND balance_before < ABS(actual_amount) THEN
        RAISE EXCEPTION 'Insufficient TAMA balance. Required: %, Available: %', ABS(actual_amount), balance_before;
    END IF;
    
    -- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    balance_after := GREATEST(0, balance_before + actual_amount);
    
    -- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    INSERT INTO tama_transactions (
        id, wallet_address, operation_type, amount, balance_before, balance_after,
        description, metadata, entry_type, created_at
    ) VALUES (
        transaction_id, p_wallet_address, p_operation_type, actual_amount,
        balance_before, balance_after, p_description, p_metadata, entry_type, NOW()
    );
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ leaderboard
    UPDATE leaderboard
    SET tama = balance_after, updated_at = NOW()
    WHERE wallet_address = p_wallet_address;
    
    -- –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –≤ leaderboard, —Å–æ–∑–¥–∞–µ–º
    IF NOT FOUND THEN
        INSERT INTO leaderboard (wallet_address, tama, xp, level, created_at, updated_at)
        VALUES (p_wallet_address, balance_after, 0, 1, NOW(), NOW());
    END IF;
    
    RETURN transaction_id;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
CREATE OR REPLACE FUNCTION get_tama_transaction_history(
    p_wallet_address TEXT,
    p_limit INTEGER DEFAULT 50,
    p_offset INTEGER DEFAULT 0
)
RETURNS TABLE (
    id TEXT,
    operation_type TEXT,
    amount DECIMAL(18,8),
    balance_before DECIMAL(18,8),
    balance_after DECIMAL(18,8),
    description TEXT,
    metadata JSONB,
    entry_type TEXT,
    created_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        t.id, t.operation_type, t.amount, t.balance_before, t.balance_after,
        t.description, t.metadata, t.entry_type, t.created_at
    FROM tama_transactions t
    WHERE t.wallet_address = p_wallet_address
    ORDER BY t.created_at DESC
    LIMIT p_limit
    OFFSET p_offset;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
CREATE OR REPLACE FUNCTION get_tama_operation_stats(
    p_wallet_address TEXT,
    p_period_days INTEGER DEFAULT 30
)
RETURNS TABLE (
    total_earned DECIMAL(18,8),
    total_spent DECIMAL(18,8),
    net_balance DECIMAL(18,8),
    operations_count BIGINT,
    by_type JSONB
) AS $$
DECLARE
    start_date TIMESTAMP WITH TIME ZONE;
BEGIN
    start_date := NOW() - INTERVAL '1 day' * p_period_days;
    
    RETURN QUERY
    WITH stats AS (
        SELECT 
            COALESCE(SUM(CASE WHEN entry_type = 'DEBIT' THEN amount ELSE 0 END), 0) as earned,
            COALESCE(SUM(CASE WHEN entry_type = 'CREDIT' THEN ABS(amount) ELSE 0 END), 0) as spent,
            COUNT(*) as total_ops,
            jsonb_object_agg(
                operation_type,
                jsonb_build_object(
                    'count', count,
                    'total_amount', total_amount
                )
            ) as type_stats
        FROM (
            SELECT 
                operation_type,
                entry_type,
                amount,
                COUNT(*) as count,
                SUM(ABS(amount)) as total_amount
            FROM tama_transactions
            WHERE wallet_address = p_wallet_address
                AND created_at >= start_date
            GROUP BY operation_type, entry_type, amount
        ) grouped
    )
    SELECT 
        stats.earned as total_earned,
        stats.spent as total_spent,
        (stats.earned - stats.spent) as net_balance,
        stats.total_ops as operations_count,
        stats.type_stats as by_type
    FROM stats;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤
CREATE OR REPLACE FUNCTION verify_tama_balance_integrity()
RETURNS TABLE (
    wallet_address TEXT,
    leaderboard_balance DECIMAL(18,8),
    calculated_balance DECIMAL(18,8),
    difference DECIMAL(18,8),
    is_correct BOOLEAN
) AS $$
BEGIN
    RETURN QUERY
    WITH calculated_balances AS (
        SELECT 
            wallet_address,
            SUM(amount) as calculated_balance
        FROM tama_transactions
        GROUP BY wallet_address
    )
    SELECT 
        l.wallet_address,
        l.tama as leaderboard_balance,
        COALESCE(cb.calculated_balance, 0) as calculated_balance,
        (l.tama - COALESCE(cb.calculated_balance, 0)) as difference,
        (l.tama = COALESCE(cb.calculated_balance, 0)) as is_correct
    FROM leaderboard l
    LEFT JOIN calculated_balances cb ON l.wallet_address = cb.wallet_address
    WHERE l.tama != COALESCE(cb.calculated_balance, 0);
END;
$$ LANGUAGE plpgsql;

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
CREATE OR REPLACE VIEW v_tama_transactions AS
SELECT 
    t.id,
    t.wallet_address,
    t.operation_type,
    t.amount,
    t.balance_before,
    t.balance_after,
    t.description,
    t.metadata,
    t.entry_type,
    CASE 
        WHEN t.entry_type = 'DEBIT' THEN '+' || t.amount::TEXT
        ELSE t.amount::TEXT
    END as formatted_amount,
    t.created_at,
    t.updated_at
FROM tama_transactions t
ORDER BY t.created_at DESC;

-- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
CREATE OR REPLACE VIEW v_tama_operation_summary AS
SELECT 
    operation_type,
    entry_type,
    COUNT(*) as transaction_count,
    SUM(ABS(amount)) as total_amount,
    AVG(ABS(amount)) as avg_amount,
    MIN(ABS(amount)) as min_amount,
    MAX(ABS(amount)) as max_amount,
    DATE_TRUNC('day', created_at) as transaction_date
FROM tama_transactions
GROUP BY operation_type, entry_type, DATE_TRUNC('day', created_at)
ORDER BY transaction_date DESC, operation_type;

-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Ç–∞–±–ª–∏—Ü–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º
COMMENT ON TABLE tama_transactions IS '–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TAMA —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–≤–æ–π–Ω–æ–π –∑–∞–ø–∏—Å–∏';
COMMENT ON COLUMN tama_transactions.entry_type IS '–¢–∏–ø –∑–∞–ø–∏—Å–∏: DEBIT (–ø—Ä–∏—Ö–æ–¥) –∏–ª–∏ CREDIT (—Ä–∞—Å—Ö–æ–¥)';
COMMENT ON COLUMN tama_transactions.amount IS '–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–ª—è DEBIT, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è CREDIT)';
COMMENT ON COLUMN tama_transactions.balance_before IS '–ë–∞–ª–∞–Ω—Å –¥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏';
COMMENT ON COLUMN tama_transactions.balance_after IS '–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏';

COMMENT ON FUNCTION create_tama_transaction IS '–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é TAMA —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞';
COMMENT ON FUNCTION get_tama_transaction_history IS '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞';
COMMENT ON FUNCTION get_tama_operation_stats IS '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥';
COMMENT ON FUNCTION verify_tama_balance_integrity IS '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–æ–≤ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏';

-- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
-- 
-- –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–∑–∞—Ä–∞–±–æ—Ç–æ–∫):
-- SELECT create_tama_transaction('wallet123', 'PET_CLICK', 5, 'Earned TAMA for clicking pet');
--
-- –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Ä–∞—Å—Ö–æ–¥):
-- SELECT create_tama_transaction('wallet123', 'FEEDING_COST', 10, 'Spent TAMA for feeding pet');
--
-- –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é:
-- SELECT * FROM get_tama_transaction_history('wallet123', 20, 0);
--
-- –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
-- SELECT * FROM get_tama_operation_stats('wallet123', 7);
--
-- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å:
-- SELECT * FROM verify_tama_balance_integrity();

-- ‚úÖ TAMA Double-Entry Accounting System setup completed!
